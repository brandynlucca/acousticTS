r0[3,i] <- Height
idx <- idx + step
}
idx
step
r0
step
a0
############
#Create prolate spheroid
N  <- 50
L = 30e-3
step = L/N
r0 <- matrix(rep(NA, (N)*3), nrow=3)
a0 <- rep(NA, (N))
Height = L/8
idx <- 0
for(i in 1:N){
if(i == N){
r0[1,i] <- L
a0[i] <- Height/2 * sqrt(1 - ((L-L/2)/(L/2))^2)
}else{
r0[1,i] <- idx
a0[i] <- Height/2 * sqrt(1-((idx - L/2)/(L/2))^2)
}
r0[2,i] <- 0
r0[3,i] <- Height
idx <- idx + step
}
max(a0)
plot(a0)
tail(a0)
step
plot(a0)
a0
############
#Create prolate spheroid
N  <- 51
L = 30e-3
step = L/N
r0 <- matrix(rep(NA, (N)*3), nrow=3)
a0 <- rep(NA, (N))
Height = L/8
idx <- 0
for(i in 1:N){
if(i == N){
r0[1,i] <- L
a0[i] <- Height/2 * sqrt(1 - ((L-L/2)/(L/2))^2)
}else{
r0[1,i] <- idx
a0[i] <- Height/2 * sqrt(1-((idx - L/2)/(L/2))^2)
}
r0[2,i] <- 0
r0[3,i] <- Height
idx <- idx + step
}
plot(a0)
a0
N
############
#Create prolate spheroid
N  <- 50
L = 30e-3
step = L/N
r0 <- matrix(rep(NA, (N)*3), nrow=3)
a0 <- rep(NA, (N))
Height = L/8
idx <- 0
for(i in 1:N){
if(i == N){
r0[1,i] <- L
a0[i] <- Height/2 * sqrt(1 - ((L-L/2)/(L/2))^2)
}else{
r0[1,i] <- idx
a0[i] <- Height/2 * sqrt(1-((idx - L/2)/(L/2))^2)
}
r0[2,i] <- 0
r0[3,i] <- Height
idx <- idx + step
}
a0
library(ZooScatR)
DWBAapp()
library(reticulate) #rPython crossover
library(marelac) #seawater propertiers measurements
#Import scipy.special module from Python for Bessel functions (referenced from AMOS)
spcl <- import("scipy.special")
#Set options to maximize digits; avoid odd rounding issue when using exp() for Equation 7
options(digits=15)
#Spherical bessel functions
jl <- function(l,n,sign){ifelse(sign==1,spcl$jv(l+0.5,n) * sqrt(pi/2/n),spcl$jv(l-0.5,n) * sqrt(pi/2/n))} #Spherical bessel function of first kind
yl <- function(l,n){spcl$yv(l+0.5,n) * sqrt(pi/2/n)} #Spherical bessel function of second kind
#First derivatives of spherical bessel functions
jd <- function(l,n){jl(l,n,-1) - (l+1) / n * jl(l,n,1)}
yd <- function(l,n){l / n * yl(l,n) - yl(l+1,n)}
#Second derivative of spherical bessel function of first kind
jdd <- function(l,n){1 / (n^2) * ((l+1)*(l+2) - n^2) * jl(l,n,1) - 2 / n * jl(l,n,-1)}
#Sphere parameters function
sphere_param <- function(material="Tungsten carbide"){
sphere_props <- data.frame(Material=c("Tungsten carbide","Copper","Stainless steel","Aluminum"),
c1=c(6853,4760,5610,6260),
c2=c(4171,2288.5,3120,3080),
rho1=c(14900,8947,7800,2700))
return(sphere_props[which(tolower(material) == tolower(sphere_props$Material)),])
}
#Calculate theoretical TS at a single frequency for a calibration sphere
sphere_TS <- function(q,q1,q2,alpha,beta,a){
#s = salinity (PSU), t = temperature (oC), p = pressure (dBar), diameter = sphere diameter (mm), freq = frequency (Hz)
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
while(k == TRUE){
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_ll <- foo_ll + foo_l #Sum up to current iteration
if(abs(foo_l/foo_ll) < 1e-10){
k <- FALSE
}else{
l <- l + 1
}
}
foo_q <- -2 / q * foo_ll #Equation 7; full calculation
sigma <- pi * a^2 * abs(foo_q)^2 #Equation 8
TS <- 10*log10(sigma/(4*pi)) #Equation 9
return(TS)
}
#Calculate theoretical TS frequency spectrum for a calibration sphere
sphere_freq <- function(fs,fe,fi,s=33.3, t=13.5, p=25, material="Tungsten carbide", diameter=38.1){
#fs = starting frequency (Hz), fe = ending frequency (Hz), fi = frequency interval (Hz)
##s = salinity (PSU), t = temperature (oC), p = pressure (dBar), diameter = sphere diameter (mm)
freq_spec <- seq(from=fs, to=fe, by=fi) #frequency spectrum
sphere_mat <- sphere_param(material) #call sphere material properties
rho <- sw_dens(s,t,p/10) #calculate seawater density; convert pressure from dbar to bar; kg/m^3
c <- sw_svel(s,t,p/10) #calculate sW sound velocity; convert pressure from dbar to bar; m/s
a <- diameter*1e-3/2 #calculate radius; convert from diameter to radius; m
alpha <- 2*(as.numeric(sphere_mat[["rho1"]])/rho)*(as.numeric(sphere_mat[["c2"]])/c)^2 #Equation 6d
beta <- (as.numeric(sphere_mat[["rho1"]])/rho)*(as.numeric(sphere_mat[["c1"]])/c)^2 - alpha #Equation 6e
tmp.df <- data.frame(Frequency=freq_spec, TS=NA) #Generate dataframe
pb <- winProgressBar(title="Processing frequencies...", label="0% completed", min=0, max=100, initial=0)
for(i in 1:nrow(tmp.df)){
k <- 2*pi*tmp.df$Frequency[i]/c #acoustic wavenumber
q <- k*a #ka variable; Equation 6a
q1 <- q * c / as.numeric(sphere_mat[["c1"]]) #Equation 6a
q2 <- q * c / as.numeric(sphere_mat[["c2"]]) #Equation 6a
tmp.df$TS[i] <- sphere_TS(q,q1,q2,alpha,beta,a)
load.info <- sprintf("%d%% completed", round((i/nrow(tmp.df))*100))
setWinProgressBar(pb, i/(nrow(tmp.df))*100, label=load.info)
}
close(pb)
return(tmp.df)
}
###########################################################
#TEST SPECTRUM; COMPARE WITH ONLINE SWFSC TOOL
###########################################################
library(ggplot2)
#Process the data; may take a while depending on frequency bandwidth and resolution
ts.df <- sphere_freq(fs=40e3,fe=45e3,fi=500, s=32.0, t=15.5, p=25, material="Tungsten carbide", diameter=38.1)
#Import scipy.special module from Python for Bessel functions (referenced from AMOS)
spcl <- import("scipy.special")
#Theoretical TS for elastic spheres
#Last Update: 20 MAY 2018
#All formulas for calculation of TS derived from: MacLennan D.N. (1981) The Theory of Solid Spheres as Sonar
#Calibration Targets. Scottis Fisheries Research No. 22, Department of Agriculture and Fisheries for Scotland.
library(reticulate) #rPython crossover
install.packages("reticulate")
#Theoretical TS for elastic spheres
#Last Update: 20 MAY 2018
#All formulas for calculation of TS derived from: MacLennan D.N. (1981) The Theory of Solid Spheres as Sonar
#Calibration Targets. Scottis Fisheries Research No. 22, Department of Agriculture and Fisheries for Scotland.
library(reticulate) #rPython crossover
library(marelac) #seawater propertiers measurements
#Import scipy.special module from Python for Bessel functions (referenced from AMOS)
spcl <- import("scipy.special")
#Process the data; may take a while depending on frequency bandwidth and resolution
ts.df <- sphere_freq(fs=40e3,fe=45e3,fi=500, s=32.0, t=15.5, p=25, material="Tungsten carbide", diameter=38.1)
#Graph the data
p1 <- ggplot(data=ts.df, aes(Frequency/1000,TS)) + geom_path(size=1) + geom_point(size=3) +
theme_bw() +
theme(text=element_text(size=18), axis.text=element_text(size=18, colour="black"),
panel.grid=element_blank()) +
labs(x="Frequency (kHz)",
y=expression(paste("Target strength (dB re: ",m^2," at 1m)")))
p1
#Process the data; may take a while depending on frequency bandwidth and resolution
ts.df <- sphere_freq(fs=40e3,fe=300e3,fi=500, s=32.0, t=15.5, p=25, material="Tungsten carbide", diameter=38.1)
#Graph the data
p1 <- ggplot(data=ts.df, aes(Frequency/1000,TS)) + geom_path(size=1) + geom_point(size=3) +
theme_bw() +
theme(text=element_text(size=18), axis.text=element_text(size=18, colour="black"),
panel.grid=element_blank()) +
labs(x="Frequency (kHz)",
y=expression(paste("Target strength (dB re: ",m^2," at 1m)")))
p1
ts.df[ts.df$Frequency == 40e3,]
jd(1,1)
jdd(1,1)
jl(1,1)
jl(1,1,sign=1)
jdd(1,1)
frequency
frequency = 120e3
k = 2*pi*frequency/1500
q <- k*a #ka variable; Equation 6a
q1 <- q * c / as.numeric(sphere_mat[["c1"]]) #Equation 6a
q2 <- q * c / as.numeric(sphere_mat[["c2"]]) #Equation 6a
sphere_mat <- sphere_param(material) #call sphere material properties
material="Tungsten carbide"
diameter=38.1
rho
rho=1030
a <- diameter*1e-3/2 #calculate radius; convert from diameter to radius; m
alpha <- 2*(as.numeric(sphere_mat[["rho1"]])/rho)*(as.numeric(sphere_mat[["c2"]])/c)^2 #Equation 6d
beta <- (as.numeric(sphere_mat[["rho1"]])/rho)*(as.numeric(sphere_mat[["c1"]])/c)^2 - alpha #Equation 6e
sphere_mat[["rho1"]]
#Sphere parameters function
sphere_param <- function(material="Tungsten carbide"){
sphere_props <- data.frame(Material=c("Tungsten carbide","Copper","Stainless steel","Aluminum"),
c1=c(6853,4760,5610,6260),
c2=c(4171,2288.5,3120,3080),
rho1=c(14900,8947,7800,2700))
return(sphere_props[which(tolower(material) == tolower(sphere_props$Material)),])
}
q <- k*a #ka variable; Equation 6a
q1 <- q * c / as.numeric(sphere_mat[["c1"]]) #Equation 6a
sphere_mat[["c1"]]
sphere_mat <- sphere_param(material) #call sphere material properties
q1 <- q * c / as.numeric(sphere_mat[["c1"]]) #Equation 6a
sphere_mat[["c1"]]
q1 <- q * c / as.numeric(sphere_mat[["c1"]]) #Equation 6a
q <- k*a #ka variable; Equation 6a
q1 <- q * c / as.numeric(sphere_mat[["c1"]]) #Equation 6a
q
c
c=1500
q1 <- q * c / as.numeric(sphere_mat[["c1"]]) #Equation 6a
q2 <- q * c / as.numeric(sphere_mat[["c2"]]) #Equation 6a
alpha <- 2*(as.numeric(sphere_mat[["rho1"]])/rho)*(as.numeric(sphere_mat[["c2"]])/c)^2 #Equation 6d
beta <- (as.numeric(sphere_mat[["rho1"]])/rho)*(as.numeric(sphere_mat[["c1"]])/c)^2 - alpha #Equation 6e
#s = salinity (PSU), t = temperature (oC), p = pressure (dBar), diameter = sphere diameter (mm), freq = frequency (Hz)
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
while(k == TRUE){
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_ll <- foo_ll + foo_l #Sum up to current iteration
if(abs(foo_l/foo_ll) < 1e-10){
k <- FALSE
}else{
l <- l + 1
}
}
foo_q <- -2 / q * foo_ll #Equation 7; full calculation
sigma <- pi * a^2 * abs(foo_q)^2 #Equation 8
TS <- 10*log10(sigma/(4*pi)) #Equation 9
TS
#s = salinity (PSU), t = temperature (oC), p = pressure (dBar), diameter = sphere diameter (mm), freq = frequency (Hz)
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
alpha
beta
sphere_mat[["rho1"]]
(as.numeric(sphere_mat[["rho1"]])/rho)
sphere_mat[["rho1"]]
alpha
2*(as.numeric(sphere_mat[["rho1"]])/rho)*(as.numeric(sphere_mat[["c2"]])/c)^2
(as.numeric(sphere_mat[["c2"]])/c)
(sphere_mat[["c2"]]
)
alpha
beta
(as.numeric(sphere_mat[["rho1"]])/rho)
alpha
beta
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_l
A2
jl(l,q2,1)
q2
jl(1,1,1)
l
jl(l,q2,1)
(l^2 + l - 2)* jl(l,q2,1)
(l^2 + l - 2)* jl(l,q2,1) + q2^2
(l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2)
jdd(l,q2)
jdd(1,1)
jdd(0,1)
jdd(0,1)
jdd(l,q2)
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
A1
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B2
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
B1
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
eta
eta_l
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_l
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
while(k == TRUE){
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_ll <- foo_ll + foo_l #Sum up to current iteration
if(abs(foo_l/foo_ll) < 1e-10){
k <- FALSE
}else{
l <- l + 1
}
}
foo_q <- -2 / q * foo_ll #Equation 7; full calculation
sigma <- pi * a^2 * abs(foo_q)^2 #Equation 8
TS <- 10*log10(sigma/(4*pi)) #Equation 9
TS
sigma
foo_q
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
while(k == TRUE){
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_ll <- foo_ll + foo_l #Sum up to current iteration
if(abs(foo_l/foo_ll) < 1e-10){
k <- FALSE
}else{
l <- l + 1
}
}
fii_ll
foo_ll
m
l
#s = salinity (PSU), t = temperature (oC), p = pressure (dBar), diameter = sphere diameter (mm), freq = frequency (Hz)
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
while(k == TRUE){
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_ll <- foo_ll + foo_l #Sum up to current iteration
# if(abs(foo_l/foo_ll) < 1e-10){
if(m == 10){
k <- FALSE
}else{
l <- l + 1
}
print(foo_ll)
}
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
while(k == TRUE){
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_ll <- foo_ll + foo_l #Sum up to current iteration
# if(abs(foo_l/foo_ll) < 1e-10){
if(l == 10){
k <- FALSE
}else{
l <- l + 1
}
print(foo_ll)
}
l=1
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Pr
l=1
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
A2
A1
B2
B1
eta_l
jd(l,q)
l(l,q,1)
jl(l,q,1)
yd(l,q)
yl(l,q)
(B2 * yd(l,q) - B1*yl(l,q))
(B2 * jd(l,q) - B1 * jl(l,q,1))
(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))
atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #
eta_l
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_l
(-1)^l * (2*l+1)
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
while(k == TRUE){
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_ll <- foo_ll + foo_l #Sum up to current iteration
# if(abs(foo_l/foo_ll) < 1e-10){
if(l == 10){
k <- FALSE
}else{
l <- l + 1
}
print(foo_ll)
}
#s = salinity (PSU), t = temperature (oC), p = pressure (dBar), diameter = sphere diameter (mm), freq = frequency (Hz)
q <- as.numeric(q)
k <- TRUE #While loop flag
l <- 0 #Iteration value
foo_ll <- 0
foo_l_prev <- 0 #Previous iteration of summed term in Equation 7
while(k == TRUE){
A2 <- (l^2 + l - 2)* jl(l,q2,1) + q2^2 * jdd(l,q2) #Equation 6b
A1 <- 2 * l * (l + 1) * (q1 * jd(l,q1) - jl(l,q1,1)) #Equation 6c
B2 <- A2 * q1^2 * (beta*jl(l,q1,1) - alpha*jdd(l,q1)) - A1 * alpha * (jl(l,q2,1) - q2 * jd(l,q2)) #Equation 6f
B1 <- q * (A2 * q1 * jd(l,q1) - A1 * jl(l,q2,1)) #Equation 6g
eta_l <- atan(-(B2 * jd(l,q) - B1 * jl(l,q,1)) / (B2 * yd(l,q) - B1*yl(l,q))) #Equation 6h
foo_l <- (-1)^l * (2*l+1) * sin(eta_l) * exp(1i*eta_l) #Equation 7; what is calculated and summed for "l"th iteration
foo_ll <- foo_ll + foo_l #Sum up to current iteration
if(abs(foo_l/foo_ll) < 1e-10){
if(l == 10){
k <- FALSE
}else{
l <- l + 1
}
print(foo_ll)
}
foo_q <- -2 / q * foo_ll #Equation 7; full calculation
sigma <- pi * a^2 * abs(foo_q)^2 #Equation 8
TS <- 10*log10(sigma/(4*pi)) #Equation 9
TS
TS <- 10*log10(sigma/(4*pi)) #Equation 9
TS
rho <- sw_dens(s,t,p/10) #calculate seawater density; convert pressure from dbar to bar; kg/m^3
library(marelac) #seawater propertiers measurements
s=33.3
t=13.5
p=25
rho <- sw_dens(s,t,p/10) #calculate seawater density; convert pressure from dbar to bar; kg/m^3
c <- sw_svel(s,t,p/10) #calculate sW sound velocity; convert pressure from dbar to bar; m/s
a <- diameter*1e-3/2 #calculate radius; convert from diameter to radius; m
rho
HP
