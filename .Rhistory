devtools::install_github("brandynlucca/acousticTS@test-branch")
?mcgehee
z <- c(seq(1,5,1), seq(4,1,1))
seq(4,1,1)
z <- c(seq(1,5,1), rev(seq(1,5,1)))*1e-4)
z <- c(seq(1,5,1), rev(seq(1,5,1)))*1e-4
z
length(z)
x <- seq(1,10,1)*1e-3; y <- rep(0,10); z <- c(seq(1,5,1), rev(seq(1,5,1)))*1e-4
x <- seq(1,10,1)*1e-3; y <- rep(0,10); z <- c(seq(1,5,1),rev(seq(1,5,1)))*1e-4
a <- z/2
h <- 1.0279
g <- 1.036
new_target <- FFSgenerate(x=x,y=y,z=z,a=a,g=g,h=h)
#' #Let's model where sound speed (c) is 1500 m/s, frequency is 120 kHz, with no phase deviation
#' c <- 1500
#' freq <- 120e3
#' SDWBA(shape=new_target, c=c, frequency=freq)
#' @return
#' Calls in an FFS-class object from a *.csv file
#' @export
#Manual shape creation
##Inputs required:
##x,y,z for position matrix, a for radius, g and h for material properties, theta for tilt angle (default = 0.0 deg)
FFSgenerate <- function(x,y,z,a,g,h,theta=pi/2){
return(new("FFS", rpos=as.matrix(rbind(x,y,z)),a=a,g=g,h=h,theta=theta[1],shape="straight",pc=0.0,L=max(x),ncyl=length(x)))}
new_target <- FFSgenerate(x=x,y=y,z=z,a=a,g=g,h=h)
c=1500
freq = 120e3
SDWBA(shape=new_target, c=c, frequency=freq)
new_target
FALSE
type(FALSE)
str(FALSE)
str(1)
FFS <- setClass("FFS",slots=c(rpos="matrix",a="numeric",g="numeric",h="numeric",theta="numeric",shape="logical",pc="numeric",L="numeric",ncyl="numeric"))
SDWBA <- function(shape=NULL, x=shape@rpos[1,], y=shape@rpos[2,], z=shape@rpos[3,],
c=1500, frequency, phase=0.0, tilt=shape@theta, a=shape@a, h=shape@h, g=shape@g, pc=shape@pc){
require(elliptic)
rpos <- as.matrix(rbind(x,y,z))
kt <- cbind(cos(tilt),rep(0,length(tilt)),sin(tilt))
k1 <- kcalc(frequency,c)*kt; k2 <- vecnorm(k1) / h
fbs <- 0 + 0i
for(j in 1:(shape@ncyl-1)){
r1 <- rpos[,j]; r2 <- rpos[,j+1]
a1 <- a[j]; a2 <- a[j+1]
beta <- abs(acos((k1%*%(r2-r1))/(vecnorm(k1)*vecnorm(r2-r1))) - pi/2)
SDWBAint <- function(s){
rint <- s * (r2-r1)+r1
aint <- s * (a2-a1)+a1
gamma <- 1/(g*h^2)+1/g-2
if(abs(abs(beta)-pi/2)<1e-10){
bessel <- k2*aint
}else{
bessel <- ja(1,2*k2*aint*cos(beta))/cos(beta)
}
if(shape@curve == F){
return(vecnorm(k1)/4*gamma*aint*exp(2i*k1%*%rint/h)*bessel*vecnorm(r2-r1))
}else{
return(vecnorm(k1)*pc/4*gamma*aint*exp(2i*k2*pc)*exp(-2i*k2*pc*cos(beta))*bessel*(vecnorm(r2-r1)/pc))
}
}
SDWBAint <- Vectorize(SDWBAint)
integral <- myintegrate(SDWBAint,0,1)
fbs <- fbs + integral * exp(1i * rnorm(1,0,phase))
}
return(20*log10(abs(fbs)))
}
SDWBA(shape=new_target, c=c, frequency=freq)
FFS <- setClass("FFS",slots=c(rpos="matrix",a="numeric",g="numeric",h="numeric",theta="numeric",shape="logical",pc="numeric",L="numeric",ncyl="numeric"))
#' #Let's model where sound speed (c) is 1500 m/s, frequency is 120 kHz, with no phase deviation
#' c <- 1500
#' freq <- 120e3
#' SDWBA(shape=new_target, c=c, frequency=freq)
#' @return
#' Calls in an FFS-class object from a *.csv file
#' @export
#Manual shape creation
##Inputs required:
##x,y,z for position matrix, a for radius, g and h for material properties, theta for tilt angle (default = 0.0 deg)
FFSgenerate <- function(x,y,z,a,g,h,theta=pi/2){
return(new("FFS", rpos=as.matrix(rbind(x,y,z)),a=a,g=g,h=h,theta=theta[1],curve=F,pc=0.0,L=max(x),ncyl=length(x)))}
new_target <- FFSgenerate(x=x,y=y,z=z,a=a,g=g,h=h)
FFS <- setClass("FFS",slots=c(rpos="matrix",a="numeric",g="numeric",h="numeric",theta="numeric",curve="logical",pc="numeric",L="numeric",ncyl="numeric"))
new_target <- FFSgenerate(x=x,y=y,z=z,a=a,g=g,h=h)
SDWBA(shape=new_target, c=c, frequency=freq)
?jl
document()
roxygen2::roxygenise()
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0)
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0,ncyl=length(x))
SDWBA <- function(shape=NULL, x=shape@rpos[1,], y=shape@rpos[2,], z=shape@rpos[3,],
c=1500, frequency, phase=0.0, tilt=shape@theta, a=shape@a, h=shape@h, g=shape@g, pc=shape@pc,
ncyl=ifelse(shape==NULL,length(x),shape@ncyl)){
require(elliptic)
rpos <- as.matrix(rbind(x,y,z))
kt <- cbind(cos(tilt),rep(0,length(tilt)),sin(tilt))
k1 <- kcalc(frequency,c)*kt; k2 <- vecnorm(k1) / h
fbs <- 0 + 0i
for(j in 1:(ncyl-1)){
r1 <- rpos[,j]; r2 <- rpos[,j+1]
a1 <- a[j]; a2 <- a[j+1]
beta <- abs(acos((k1%*%(r2-r1))/(vecnorm(k1)*vecnorm(r2-r1))) - pi/2)
SDWBAint <- function(s){
rint <- s * (r2-r1)+r1
aint <- s * (a2-a1)+a1
gamma <- 1/(g*h^2)+1/g-2
if(abs(abs(beta)-pi/2)<1e-10){
bessel <- k2*aint
}else{
bessel <- ja(1,2*k2*aint*cos(beta))/cos(beta)
}
if(shape@curve == F){
return(vecnorm(k1)/4*gamma*aint*exp(2i*k1%*%rint/h)*bessel*vecnorm(r2-r1))
}else{
return(vecnorm(k1)*pc/4*gamma*aint*exp(2i*k2*pc)*exp(-2i*k2*pc*cos(beta))*bessel*(vecnorm(r2-r1)/pc))
}
}
SDWBAint <- Vectorize(SDWBAint)
integral <- myintegrate(SDWBAint,0,1)
fbs <- fbs + integral * exp(1i * rnorm(1,0,phase))
}
return(20*log10(abs(fbs)))
}
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0)
shape
shape=NULL
shape==NULL
NULL
is.null(shape)
SDWBA <- function(shape=NULL, x=shape@rpos[1,], y=shape@rpos[2,], z=shape@rpos[3,],
c=1500, frequency, phase=0.0, tilt=shape@theta, a=shape@a, h=shape@h, g=shape@g, pc=shape@pc,
ncyl=ifelse(is.null(shape),length(x),shape@ncyl)){
require(elliptic)
rpos <- as.matrix(rbind(x,y,z))
kt <- cbind(cos(tilt),rep(0,length(tilt)),sin(tilt))
k1 <- kcalc(frequency,c)*kt; k2 <- vecnorm(k1) / h
fbs <- 0 + 0i
for(j in 1:(ncyl-1)){
r1 <- rpos[,j]; r2 <- rpos[,j+1]
a1 <- a[j]; a2 <- a[j+1]
beta <- abs(acos((k1%*%(r2-r1))/(vecnorm(k1)*vecnorm(r2-r1))) - pi/2)
SDWBAint <- function(s){
rint <- s * (r2-r1)+r1
aint <- s * (a2-a1)+a1
gamma <- 1/(g*h^2)+1/g-2
if(abs(abs(beta)-pi/2)<1e-10){
bessel <- k2*aint
}else{
bessel <- ja(1,2*k2*aint*cos(beta))/cos(beta)
}
if(shape@curve == F){
return(vecnorm(k1)/4*gamma*aint*exp(2i*k1%*%rint/h)*bessel*vecnorm(r2-r1))
}else{
return(vecnorm(k1)*pc/4*gamma*aint*exp(2i*k2*pc)*exp(-2i*k2*pc*cos(beta))*bessel*(vecnorm(r2-r1)/pc))
}
}
SDWBAint <- Vectorize(SDWBAint)
integral <- myintegrate(SDWBAint,0,1)
fbs <- fbs + integral * exp(1i * rnorm(1,0,phase))
}
return(20*log10(abs(fbs)))
}
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0)
SDWBA <- function(shape=NULL, x=shape@rpos[1,], y=shape@rpos[2,], z=shape@rpos[3,],
c=1500, frequency, phase=0.0, tilt=shape@theta, a=shape@a, h=shape@h, g=shape@g, curve=F, pc=shape@pc,
ncyl=ifelse(is.null(shape),length(x),shape@ncyl)){
require(elliptic)
rpos <- as.matrix(rbind(x,y,z))
kt <- cbind(cos(tilt),rep(0,length(tilt)),sin(tilt))
k1 <- kcalc(frequency,c)*kt; k2 <- vecnorm(k1) / h
fbs <- 0 + 0i
for(j in 1:(ncyl-1)){
r1 <- rpos[,j]; r2 <- rpos[,j+1]
a1 <- a[j]; a2 <- a[j+1]
beta <- abs(acos((k1%*%(r2-r1))/(vecnorm(k1)*vecnorm(r2-r1))) - pi/2)
SDWBAint <- function(s){
rint <- s * (r2-r1)+r1
aint <- s * (a2-a1)+a1
gamma <- 1/(g*h^2)+1/g-2
if(abs(abs(beta)-pi/2)<1e-10){
bessel <- k2*aint
}else{
bessel <- ja(1,2*k2*aint*cos(beta))/cos(beta)
}
if(shape@curve == F){
return(vecnorm(k1)/4*gamma*aint*exp(2i*k1%*%rint/h)*bessel*vecnorm(r2-r1))
}else{
return(vecnorm(k1)*pc/4*gamma*aint*exp(2i*k2*pc)*exp(-2i*k2*pc*cos(beta))*bessel*(vecnorm(r2-r1)/pc))
}
}
SDWBAint <- Vectorize(SDWBAint)
integral <- myintegrate(SDWBAint,0,1)
fbs <- fbs + integral * exp(1i * rnorm(1,0,phase))
}
return(20*log10(abs(fbs)))
}
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0)
SDWBA <- function(shape=NULL, x=shape@rpos[1,], y=shape@rpos[2,], z=shape@rpos[3,],
c=1500, frequency, phase=0.0, tilt=shape@theta, a=shape@a, h=shape@h, g=shape@g, pc=shape@pc,
curve=ifelse(is.null(shape),F,shape@curve),
ncyl=ifelse(is.null(shape),length(x),shape@ncyl)){
require(elliptic)
rpos <- as.matrix(rbind(x,y,z))
kt <- cbind(cos(tilt),rep(0,length(tilt)),sin(tilt))
k1 <- kcalc(frequency,c)*kt; k2 <- vecnorm(k1) / h
fbs <- 0 + 0i
for(j in 1:(ncyl-1)){
r1 <- rpos[,j]; r2 <- rpos[,j+1]
a1 <- a[j]; a2 <- a[j+1]
beta <- abs(acos((k1%*%(r2-r1))/(vecnorm(k1)*vecnorm(r2-r1))) - pi/2)
SDWBAint <- function(s){
rint <- s * (r2-r1)+r1
aint <- s * (a2-a1)+a1
gamma <- 1/(g*h^2)+1/g-2
if(abs(abs(beta)-pi/2)<1e-10){
bessel <- k2*aint
}else{
bessel <- ja(1,2*k2*aint*cos(beta))/cos(beta)
}
if(curve == F){
return(vecnorm(k1)/4*gamma*aint*exp(2i*k1%*%rint/h)*bessel*vecnorm(r2-r1))
}else{
return(vecnorm(k1)*pc/4*gamma*aint*exp(2i*k2*pc)*exp(-2i*k2*pc*cos(beta))*bessel*(vecnorm(r2-r1)/pc))
}
}
SDWBAint <- Vectorize(SDWBAint)
integral <- myintegrate(SDWBAint,0,1)
fbs <- fbs + integral * exp(1i * rnorm(1,0,phase))
}
return(20*log10(abs(fbs)))
}
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0)
?read.csv
document()
devtools::document()
roxygen2::roxygenise()
devtools::install_github("brandynlucca/acousticTS@test-branch")
read.csv(https://github.com/brandynlucca/acousticTS/blob/test-branch/data/mcgehee.csv)
read.csv("https://github.com/brandynlucca/acousticTS/blob/test-branch/data/mcgehee.csv"")
read.csv("https://github.com/brandynlucca/acousticTS/blob/test-branch/data/mcgehee.csv")
tar <- read.csv("https://github.com/brandynlucca/acousticTS/blob/test-branch/data/mcgehee.csv")
tar
head(tar)
rm(tar)
data(mcgehee)
head(mcgehee)
mcgehee
roxygen2::roxygenise()
roxygen2::roxygenise()
document()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
"cakrill"
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxyenise()
roxygen2::roxyenisze()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
devtools::check()
error
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github("brandynlucca/acousticTS@test-branch")
devtools::install_github("brandynlucca/acousticTS@test-branch")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("brandynlucca/acousticTS@test-branch")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("brandynlucca/acousticTS@test-branch")
install.packages("scales")
devtools::install_github("brandynlucca/acousticTS@test-branch")
remotes::update_packages("rlang")
remotes::update_packages("rlang")
devtools::install_github("brandynlucca/acousticTS@test-branch")
roxygen2::roxygenise()
devtools::install_github("brandynlucca/acousticTS@test-branch")
require(acousticTS)
data(mcgehee)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github("brandynlucca/acousticTS@test-branch")
rm(list=ls())
data(mcgehee)
data(cakrill)
load("C:/Users/Brandyn/Documents/GitHub/acousticTS/data/cakrill.Rda")
load("G:/epac.Rda")
rm(list=ls())
epac <- FLSread("G:/epac.csv")
save(epac, "G:/epac.rda")
save(epac, "G:/epac.rda")
save(epac, file="G:/epac.rda")
?save
devtools::install_github("brandynlucca/acousticTS@test-branch")
roxygen2::roxygenise()
devtools::install_github("brandynlucca/acousticTS@test-branch")
rm(list=ls())
require(acousticTS)
data(cakrill)
data(epac)
data(mcgehee)
roxygen2::roxygenise()
devtools::install_github("brandynlucca/acousticTS@test-branch")
require(acousticTS)
data(cakrill)
data(mcgehee)
devtools::install_github("brandynlucca/acousticTS@test-branch")
data(cakrill)
data(mcgehee)
data9mcgehee
data(mcgehee)
save(cakrill, file="data/cakrill.RData")
save(epac, file="data/epac.RData")
epac <- FLSread("G:/epac.csv")
save(epac, file="data/epac.RData")
devtools::install_github("brandynlucca/acousticTS@test-branch")
require(acousticTS)
data(mcgehee)
data(epac)
rm(list=ls())
require(acousticTS)
data(epac)
file = "G:/cakrill.csv"
cakrill <- FLSread(file)
save(epac, file=paste("data/cakrill.Rdata")
file = "G:/tspin.csv"
tspin <- FLSread(file)
save(epac, file=paste("data/tspin.Rdata")
file = "G:/tspi.csv"
tspin <- FLSread(file)
save(epac, file=paste("data/tspin.Rdata")
file = "G:/ndif.csv"
ndif <- FLSread(file)
save(ndif, file=paste("data/ndiff.Rdata")
file = "G:/tspi.csv"
tspi <- FLSread(file)
save(tspi, file=paste("data/tspin.Rdata")
save(tspi, file="data/tspin.Rdata")
save(tspi, file="/data/tspin.Rdata")
file = "G:/tspi.csv"
tspi <- FLSread(file)
file = "G:/tspin.csv"
tspi <- FLSread(file)
save(tspi, file="/data/tspin.Rdata")
save(tspi, file="data/tspin.Rdata")
file = "G:/ndiff.csv"
tspi <- FLSread(file)
save(tspi, file="data/ndiff.Rdata")
file = "G:/cakrill.csv"
tspi <- FLSread(file)
save(tspi, file="data/cakrill.Rdata")
devtools::install_github("brandynlucca/acousticTS@test-branch")
rm(list=ls())
require(acousticTS)
data(epac)
data(cakrill)
data(tspin)
data(mcgehee)
data(ndiff)
load("C:/Users/Brandyn/Documents/GitHub/acousticTS/data/ndiff.Rdata")
roxygen2::roxygenise()
load("C:/Users/Brandyn/Documents/GitHub/acousticTS/data/cakrill.Rdata")
file = "G:/cakrill.csv"
file
tspi <- FLSread(file)
tspi
save(tspi, file="data/cakrill.Rdata")
devtools::install_github("brandynlucca/acousticTS@test-branch")
data(epac)
data(mcgehee)
data(tspin)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::session_info()
roxygen2::roxygenise()
devtools::use_data_raw()
?use_data
use_data()
use_data(epac)
usethis::use_data(epac)
usethis::use_data(cakrill)
usethis::use_data(ndiff)
usethis::use_data(mcgehee)
file = "G:/cakrill.csv"
tspi <- FLSread(file)
save(tspi, file="data/cakrill.rda")
usethis::use_data(mcgehee)
usethis::use_data(cakrill)
save(tspi, file="data/cakrill.Rdata")
usethis::use_data(cakrill)
load("C:/Users/Brandyn/Documents/GitHub/acousticTS/data/cakrill.Rdata")
cakrill
file = "G:/cakrill.csv"
file = "G:/cakrill.csv"
cakrill <- FLSread(file)
save(cakrill, file="data/cakrill.Rdata")
usethis::use_data(cakrill)
file = "G:/tspin.csv"
tspin <- FLSread(file)
save(tspin, file="data/tspin.Rdata")
usethis::use_data(tspin)
file = "G:/ndiff.csv"
ndiff <- FLSread(file)
save(ndiff, file="data/ndiff.Rdata")
usethis::use_data(ndiff)
devtools::install_github("brandynlucca/acousticTS@test-branch", dependencies=T, force=T)
require(acousticTS)
data(mcgehee)
data(cakrill)
data(tspin)
data(epac)
data(ndiff)
rm(list=ls())
data(mcgehee)
data(cakrill)
data(tspin)
data(epac)
data(ndiff)
?degrad
degrad(180, "deg")
rm(list=ls())
knitr::opts_chunk$set(echo = FALSE)
#install.packages("devtools") #if needed, uncomment this line and install devtools
require(devtools)
install_github("brandynlucca/acousticTS@test-branch")
#Load the package
require(acousticTS)
#Create vectors for the x, y, and z coordinates that will fill the position matrix within the model
x <- seq(1,10,1)*1e-3; y <- rep(0,10); z <- c(seq(1,5,1), rev(seq(1,5,1)))*1e-4
#Assign the radius vector
a <- z/2
#Assign material properties
g <- 1.036; h <- 1.0279
#Set curvature and radius of curvature
curve=T; pc=3.3
#Assign orientation
theta=90 #degrees
theta_rad <- degrad(theta, "deg") #convert from degrees to radians; model requires radians
#Fill out remaining parameters
c <- 1500 #m/s, sound speed
frequency <- 120e3 #Hz, transmit frequency
#Now let's calculate the TS using SDWBA
SDWBA(c=c, frequency=frequency, x=x, y=y, z=z, a=a, g=g, h=h, curve=curve, pc=pc, theta=theta_rad)
#install.packages("devtools") #if needed, uncomment this line and install devtools
require(devtools)
install_github("brandynlucca/acousticTS@test-branch")
rm(list=ls())
#install.packages("devtools") #if needed, uncomment this line and install devtools
require(devtools)
install_github("brandynlucca/acousticTS@test-branch")
#install.packages("devtools") #if needed, uncomment this line and install devtools
require(devtools)
install_github("brandynlucca/acousticTS@test-branch")
#Load the package
require(acousticTS)
#Create vectors for the x, y, and z coordinates that will fill the position matrix within the model
x <- seq(1,10,1)*1e-3; y <- rep(0,10); z <- c(seq(1,5,1), rev(seq(1,5,1)))*1e-4
#Assign the radius vector
a <- z/2
#Assign material properties
g <- 1.036; h <- 1.0279
#Set curvature and radius of curvature
curve=T; pc=3.3
#Assign orientation
theta=90 #degrees
theta_rad <- degrad(theta, "deg") #convert from degrees to radians; model requires radians
#Fill out remaining parameters
c <- 1500 #m/s, sound speed
frequency <- 120e3 #Hz, transmit frequency
#Now let's calculate the TS using SDWBA
SDWBA(c=c, frequency=frequency, x=x, y=y, z=z, a=a, g=g, h=h, curve=curve, pc=pc, theta=theta_rad)
#Load the package
require(acousticTS)
#Create vectors for the x, y, and z coordinates that will fill the position matrix within the model
x <- seq(1,10,1)*1e-3; y <- rep(0,10); z <- c(seq(1,5,1), rev(seq(1,5,1)))*1e-4
#Assign the radius vector
a <- z/2
#Assign material properties
g <- 1.036; h <- 1.0279
#Set curvature and radius of curvature
curve=T; pc=3.3
#Assign orientation
theta=90 #degrees
theta_rad <- degrad(theta, "deg") #convert from degrees to radians; model requires radians
#Fill out remaining parameters
c <- 1500 #m/s, sound speed
frequency <- 120e3 #Hz, transmit frequency
#Now let's calculate the TS using SDWBA
SDWBA(c=c, frequency=frequency, x=x, y=y, z=z, a=a, g=g, h=h, curve=curve, pc=pc, theta=theta_rad)
