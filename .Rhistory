a_new <- L/numdiv
R12 <- ((pa*ca)/(cm*pm)-1) / (pa*ca/(pm*cm)+1)
km <- kcalc(f,cm)
ka <- kcalc(f,ca)
T12 <- 2*(pa*ca/(pm*cm))/(1+(pa*ca/(pm*cm)))
T21 <- 2*(pm*cm/(pa*ca))/(1+(pm*cm/(pa*ca)))
mu <- -pi/2*km*a_new / (km*a_new+0.4)
Io <- 1 - T12 * T21 * exp(1i*4*ka*a_new) * exp(1i*mu)
fbs <- 0.5*sqrt(pc*a_new) * R12 * exp(-1i*2*km*a_new) * Io * exp(-alpha*(2*tilt*pc/L)^2)
TS <- 20*log10(abs(fbs))
TS
ca <- h*cm #animal soundspeed
pa <- g*pm #animal density
a_new <- L/numdiv
R12 <- ((pa*ca)/(cm*pm)-1) / (pa*ca/(pm*cm)+1)
km <- kcalc(f,cm)
ka <- kcalc(f,ca)
T12 <- 2*(pa*ca/(pm*cm))/(1+(pa*ca/(pm*cm)))
T21
T12
mu <- -pi/2*km*a_new / (km*a_new+0.4)
mu
Io
Io <- 1 - T12 * T21 * exp(1i*4*ka*a_new) * exp(1i*mu)
0.5*sqrt(pc*a_new)
0.5*sqrt(pc*a_new) * R12
0.5*sqrt(pc*a_new) * R12 * exp(-1i*2*km*a_new)
0.5*sqrt(pc*a_new) * R12 * exp(-1i*2*km*a_new) * Io
0.5*sqrt(pc*a_new) * R12 * exp(-1i*2*km*a_new) * Io * exp(-alpha*(2*tilt*pc/L)^2)
-alpha
(2*tilt*pc/L)
(2*tilt*pc/L)^2
tilt
tilt=degrad(shape@theta,"deg")
-alpha*(2*tilt*pc/L)^2
fbs <- 0.5*sqrt(pc*a_new) * R12 * exp(-1i*2*km*a_new) * Io * exp(-alpha*(2*tilt*pc/L)^2)
TS <- 20*log10(abs(fbs))
TS
tilt = 0
fbs <- 0.5*sqrt(pc*a_new) * R12 * exp(-1i*2*km*a_new) * Io * exp(-alpha*(2*tilt*pc/L)^2)
TS <- 20*log10(abs(fbs))
TS
degrad(90,"deg")
#DFCM_simple
DFCM_simple <- function(shape, L=max(shape@rpos[,1]), a=max(shape@a), g=shape@g, h=shape@h, pc=shape@pc, numdiv=length(shape@rpos[1,]),
tilt=shape@theta, cm=1500, pm=1.025, f, alpha=0.8){
ca <- h*cm #animal soundspeed
pa <- g*pm #animal density
a_new <- L/numdiv
R12 <- ((pa*ca)/(cm*pm)-1) / (pa*ca/(pm*cm)+1)
km <- kcalc(f,cm)
ka <- kcalc(f,ca)
T12 <- 2*(pa*ca/(pm*cm))/(1+(pa*ca/(pm*cm)))
T21 <- 2*(pm*cm/(pa*ca))/(1+(pm*cm/(pa*ca)))
mu <- -pi/2*km*a_new / (km*a_new+0.4)
Io <- 1 - T12 * T21 * exp(1i*4*ka*a_new) * exp(1i*mu)
fbs <- 0.5*sqrt(pc*a_new) * R12 * exp(-1i*2*km*a_new) * Io * exp(-alpha*(2*(tilt-pi/2)*pc/L)^2)
TS <- 20*log10(abs(fbs))
return(TS)
}
DFCM_simple(anc, f=120e3)
anc
anc@theta <- degrad(anc@theta, "deg")
DFCM_simple(anc, f=120e3)
freqs <- seq(1e3,300e3,1e3)
ts <- rep(NA, freqs)
ts <- c(rep(NA, freqs))
ts <- rep(NA, length(freqs)0)
ts <- rep(NA, length(freqs))
for(i in 1:length(freqs)){
ts <- c(ts, DFCM_simple(anc, f=freqs[i]))
}
plot(ts)
plot(freqs, ts)
length(freqs)
length(ts)
ts <- rep(NA, length(freqs))
for(i in 1:length(freqs)){
ts[i] <- DFCM_simple(anc, f=freqs[i])
}
plot(freqs, ts)
freqs <- seq(1e3,600e3,1e3)
ts <- rep(NA, length(freqs))
for(i in 1:length(freqs)){
ts[i] <- DFCM_simple(anc, f=freqs[i])
}
plot(freqs, ts)
#DFCM_simple
DFCM <- function(shape, L=max(shape@rpos[,1]), a=max(shape@a), g=shape@g, h=shape@h, pc=shape@pc, numdiv=length(shape@rpos[1,]),
tilt=shape@theta, cm=1500, pm=1.025, f, alpha=0.8, method="two-ray"){
if(method == "two-ray"){
ca <- h*cm #animal soundspeed
pa <- g*pm #animal density
a_new <- L/numdiv
R12 <- ((pa*ca)/(cm*pm)-1) / (pa*ca/(pm*cm)+1)
km <- kcalc(f,cm)
ka <- kcalc(f,ca)
T12 <- 2*(pa*ca/(pm*cm))/(1+(pa*ca/(pm*cm)))
T21 <- 2*(pm*cm/(pa*ca))/(1+(pm*cm/(pa*ca)))
mu <- -pi/2*km*a_new / (km*a_new+0.4)
Io <- 1 - T12 * T21 * exp(1i*4*ka*a_new) * exp(1i*mu)
fbs <- 0.5*sqrt(pc*a_new) * R12 * exp(-1i*2*km*a_new) * Io * exp(-alpha*(2*(tilt-pi/2)*pc/L)^2)
TS <- 20*log10(abs(fbs))
return(TS)
}
}
DFCM_simple(anc, f=120e3)
freqs <- seq(1e3,600e3,1e3)
ts <- rep(NA, length(freqs))
for(i in 1:length(freqs)){
ts[i] <- DFCM_simple(anc, f=freqs[i])
}
plot(freqs, ts)
?SDWBA
tsd <- rep(NA, length(freqs)){
ts[i] <- SDWBA(anc, c=1500, f=freqs[i], phi=0, tilt=shape@theta)
}
for(i in 1:length(freqs)){
tsd[i] <- SDWBA(anc, c=1500, f=freqs[i], phi=0, tilt=shape@theta)
}
tsd <- rep(NA, length(freqs))
for(i in 1:length(freqs)){
tsd[i] <- SDWBA(anc, c=1500, f=freqs[i], phi=0, tilt=shape@theta)
}
plot(ts); points(tsd, col="red", pch=19)
plot(freqs, ts); points(tsd, col="red", pch=19)
plot(freqs, ts); points(freqs, tsd, col="red", pch=19)
freqs <- seq(1e3,300e3,5e3)
ts <- rep(NA, length(freqs))
for(i in 1:length(freqs)){
ts[i] <- DFCM_simple(anc, f=freqs[i])
}
plot(freqs, ts)
tsd <- rep(NA, length(freqs))
for(i in 1:length(freqs)){
tsd[i] <- SDWBA(anc, c=1500, f=freqs[i], phi=0, tilt=shape@theta)
}
plot(freqs, ts); points(freqs, tsd, col="red", pch=19)
document()
?DFCM
document
document()
?DFCM
document()
?DFCM
document()
?DFCM
document()
?DFCM
document()
DFCM <- function(shape=NULL, L=max(shape@rpos[,1]), a=max(shape@a), g=shape@g, h=shape@h, pc=shape@pc, numdiv=length(shape@rpos[1,]),
tilt=shape@theta, cm=1500, pm=1.025, f, alpha=0.8, method="two-ray"){
if(method == "two-ray"){
ca <- h*cm #animal soundspeed
pa <- g*pm #animal density
a_new <- L/numdiv
R12 <- ((pa*ca)/(cm*pm)-1) / (pa*ca/(pm*cm)+1)
km <- kcalc(f,cm)
ka <- kcalc(f,ca)
T12 <- 2*(pa*ca/(pm*cm))/(1+(pa*ca/(pm*cm)))
T21 <- 2*(pm*cm/(pa*ca))/(1+(pm*cm/(pa*ca)))
mu <- -pi/2*km*a_new / (km*a_new+0.4)
Io <- 1 - T12 * T21 * exp(1i*4*ka*a_new) * exp(1i*mu)
fbs <- 0.5*sqrt(pc*a_new) * R12 * exp(-1i*2*km*a_new) * Io * exp(-alpha*(2*(tilt-pi/2)*pc/L)^2)
TS <- 20*log10(abs(fbs))
return(TS)
}
}
document()
?DFCM
document()
?DFCM
citation(elliptic)
citation("elliptic")
document()
?SDWBA
?FFS
document()
citation("acousticTS")
?marelac
citation("marelac")
document
document()
citation("acousticTS")
?marelac
citation("marelac")
document()
citation("acousticTS")
document()
citation("acousticTS")
document()
document()
citation("acousticTS")
?acousticTS
??acousticTS
?SDWBA
devtools::document()
build()
reoxyg2n::roxygenise()
reoxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
document()
devtools::document()
build()
devtools::build()
install_github("brandynlucca/acousticTS@test-branch")
devtools::install_github("brandynlucca/acousticTS@test-branch")
ja(1,1)
jd(1,1)
jsd(1,1)
jsdd(1,1)
install_github("ggplot2")
install_github("tidyverse/ggplot2")
devtools::install_github("tidyverse/ggplot2")
?mcgehee
?mtcars
?mcgehee
devtools::install_github("brandynlucca/acousticTS@test-branch")
?mcgehee
z <- c(seq(1,5,1), seq(4,1,1))
seq(4,1,1)
z <- c(seq(1,5,1), rev(seq(1,5,1)))*1e-4)
z <- c(seq(1,5,1), rev(seq(1,5,1)))*1e-4
z
length(z)
x <- seq(1,10,1)*1e-3; y <- rep(0,10); z <- c(seq(1,5,1), rev(seq(1,5,1)))*1e-4
x <- seq(1,10,1)*1e-3; y <- rep(0,10); z <- c(seq(1,5,1),rev(seq(1,5,1)))*1e-4
a <- z/2
h <- 1.0279
g <- 1.036
new_target <- FFSgenerate(x=x,y=y,z=z,a=a,g=g,h=h)
#' #Let's model where sound speed (c) is 1500 m/s, frequency is 120 kHz, with no phase deviation
#' c <- 1500
#' freq <- 120e3
#' SDWBA(shape=new_target, c=c, frequency=freq)
#' @return
#' Calls in an FFS-class object from a *.csv file
#' @export
#Manual shape creation
##Inputs required:
##x,y,z for position matrix, a for radius, g and h for material properties, theta for tilt angle (default = 0.0 deg)
FFSgenerate <- function(x,y,z,a,g,h,theta=pi/2){
return(new("FFS", rpos=as.matrix(rbind(x,y,z)),a=a,g=g,h=h,theta=theta[1],shape="straight",pc=0.0,L=max(x),ncyl=length(x)))}
new_target <- FFSgenerate(x=x,y=y,z=z,a=a,g=g,h=h)
c=1500
freq = 120e3
SDWBA(shape=new_target, c=c, frequency=freq)
new_target
FALSE
type(FALSE)
str(FALSE)
str(1)
FFS <- setClass("FFS",slots=c(rpos="matrix",a="numeric",g="numeric",h="numeric",theta="numeric",shape="logical",pc="numeric",L="numeric",ncyl="numeric"))
SDWBA <- function(shape=NULL, x=shape@rpos[1,], y=shape@rpos[2,], z=shape@rpos[3,],
c=1500, frequency, phase=0.0, tilt=shape@theta, a=shape@a, h=shape@h, g=shape@g, pc=shape@pc){
require(elliptic)
rpos <- as.matrix(rbind(x,y,z))
kt <- cbind(cos(tilt),rep(0,length(tilt)),sin(tilt))
k1 <- kcalc(frequency,c)*kt; k2 <- vecnorm(k1) / h
fbs <- 0 + 0i
for(j in 1:(shape@ncyl-1)){
r1 <- rpos[,j]; r2 <- rpos[,j+1]
a1 <- a[j]; a2 <- a[j+1]
beta <- abs(acos((k1%*%(r2-r1))/(vecnorm(k1)*vecnorm(r2-r1))) - pi/2)
SDWBAint <- function(s){
rint <- s * (r2-r1)+r1
aint <- s * (a2-a1)+a1
gamma <- 1/(g*h^2)+1/g-2
if(abs(abs(beta)-pi/2)<1e-10){
bessel <- k2*aint
}else{
bessel <- ja(1,2*k2*aint*cos(beta))/cos(beta)
}
if(shape@curve == F){
return(vecnorm(k1)/4*gamma*aint*exp(2i*k1%*%rint/h)*bessel*vecnorm(r2-r1))
}else{
return(vecnorm(k1)*pc/4*gamma*aint*exp(2i*k2*pc)*exp(-2i*k2*pc*cos(beta))*bessel*(vecnorm(r2-r1)/pc))
}
}
SDWBAint <- Vectorize(SDWBAint)
integral <- myintegrate(SDWBAint,0,1)
fbs <- fbs + integral * exp(1i * rnorm(1,0,phase))
}
return(20*log10(abs(fbs)))
}
SDWBA(shape=new_target, c=c, frequency=freq)
FFS <- setClass("FFS",slots=c(rpos="matrix",a="numeric",g="numeric",h="numeric",theta="numeric",shape="logical",pc="numeric",L="numeric",ncyl="numeric"))
#' #Let's model where sound speed (c) is 1500 m/s, frequency is 120 kHz, with no phase deviation
#' c <- 1500
#' freq <- 120e3
#' SDWBA(shape=new_target, c=c, frequency=freq)
#' @return
#' Calls in an FFS-class object from a *.csv file
#' @export
#Manual shape creation
##Inputs required:
##x,y,z for position matrix, a for radius, g and h for material properties, theta for tilt angle (default = 0.0 deg)
FFSgenerate <- function(x,y,z,a,g,h,theta=pi/2){
return(new("FFS", rpos=as.matrix(rbind(x,y,z)),a=a,g=g,h=h,theta=theta[1],curve=F,pc=0.0,L=max(x),ncyl=length(x)))}
new_target <- FFSgenerate(x=x,y=y,z=z,a=a,g=g,h=h)
FFS <- setClass("FFS",slots=c(rpos="matrix",a="numeric",g="numeric",h="numeric",theta="numeric",curve="logical",pc="numeric",L="numeric",ncyl="numeric"))
new_target <- FFSgenerate(x=x,y=y,z=z,a=a,g=g,h=h)
SDWBA(shape=new_target, c=c, frequency=freq)
?jl
document()
roxygen2::roxygenise()
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0)
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0,ncyl=length(x))
SDWBA <- function(shape=NULL, x=shape@rpos[1,], y=shape@rpos[2,], z=shape@rpos[3,],
c=1500, frequency, phase=0.0, tilt=shape@theta, a=shape@a, h=shape@h, g=shape@g, pc=shape@pc,
ncyl=ifelse(shape==NULL,length(x),shape@ncyl)){
require(elliptic)
rpos <- as.matrix(rbind(x,y,z))
kt <- cbind(cos(tilt),rep(0,length(tilt)),sin(tilt))
k1 <- kcalc(frequency,c)*kt; k2 <- vecnorm(k1) / h
fbs <- 0 + 0i
for(j in 1:(ncyl-1)){
r1 <- rpos[,j]; r2 <- rpos[,j+1]
a1 <- a[j]; a2 <- a[j+1]
beta <- abs(acos((k1%*%(r2-r1))/(vecnorm(k1)*vecnorm(r2-r1))) - pi/2)
SDWBAint <- function(s){
rint <- s * (r2-r1)+r1
aint <- s * (a2-a1)+a1
gamma <- 1/(g*h^2)+1/g-2
if(abs(abs(beta)-pi/2)<1e-10){
bessel <- k2*aint
}else{
bessel <- ja(1,2*k2*aint*cos(beta))/cos(beta)
}
if(shape@curve == F){
return(vecnorm(k1)/4*gamma*aint*exp(2i*k1%*%rint/h)*bessel*vecnorm(r2-r1))
}else{
return(vecnorm(k1)*pc/4*gamma*aint*exp(2i*k2*pc)*exp(-2i*k2*pc*cos(beta))*bessel*(vecnorm(r2-r1)/pc))
}
}
SDWBAint <- Vectorize(SDWBAint)
integral <- myintegrate(SDWBAint,0,1)
fbs <- fbs + integral * exp(1i * rnorm(1,0,phase))
}
return(20*log10(abs(fbs)))
}
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0)
shape
shape=NULL
shape==NULL
NULL
is.null(shape)
SDWBA <- function(shape=NULL, x=shape@rpos[1,], y=shape@rpos[2,], z=shape@rpos[3,],
c=1500, frequency, phase=0.0, tilt=shape@theta, a=shape@a, h=shape@h, g=shape@g, pc=shape@pc,
ncyl=ifelse(is.null(shape),length(x),shape@ncyl)){
require(elliptic)
rpos <- as.matrix(rbind(x,y,z))
kt <- cbind(cos(tilt),rep(0,length(tilt)),sin(tilt))
k1 <- kcalc(frequency,c)*kt; k2 <- vecnorm(k1) / h
fbs <- 0 + 0i
for(j in 1:(ncyl-1)){
r1 <- rpos[,j]; r2 <- rpos[,j+1]
a1 <- a[j]; a2 <- a[j+1]
beta <- abs(acos((k1%*%(r2-r1))/(vecnorm(k1)*vecnorm(r2-r1))) - pi/2)
SDWBAint <- function(s){
rint <- s * (r2-r1)+r1
aint <- s * (a2-a1)+a1
gamma <- 1/(g*h^2)+1/g-2
if(abs(abs(beta)-pi/2)<1e-10){
bessel <- k2*aint
}else{
bessel <- ja(1,2*k2*aint*cos(beta))/cos(beta)
}
if(shape@curve == F){
return(vecnorm(k1)/4*gamma*aint*exp(2i*k1%*%rint/h)*bessel*vecnorm(r2-r1))
}else{
return(vecnorm(k1)*pc/4*gamma*aint*exp(2i*k2*pc)*exp(-2i*k2*pc*cos(beta))*bessel*(vecnorm(r2-r1)/pc))
}
}
SDWBAint <- Vectorize(SDWBAint)
integral <- myintegrate(SDWBAint,0,1)
fbs <- fbs + integral * exp(1i * rnorm(1,0,phase))
}
return(20*log10(abs(fbs)))
}
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0)
SDWBA <- function(shape=NULL, x=shape@rpos[1,], y=shape@rpos[2,], z=shape@rpos[3,],
c=1500, frequency, phase=0.0, tilt=shape@theta, a=shape@a, h=shape@h, g=shape@g, curve=F, pc=shape@pc,
ncyl=ifelse(is.null(shape),length(x),shape@ncyl)){
require(elliptic)
rpos <- as.matrix(rbind(x,y,z))
kt <- cbind(cos(tilt),rep(0,length(tilt)),sin(tilt))
k1 <- kcalc(frequency,c)*kt; k2 <- vecnorm(k1) / h
fbs <- 0 + 0i
for(j in 1:(ncyl-1)){
r1 <- rpos[,j]; r2 <- rpos[,j+1]
a1 <- a[j]; a2 <- a[j+1]
beta <- abs(acos((k1%*%(r2-r1))/(vecnorm(k1)*vecnorm(r2-r1))) - pi/2)
SDWBAint <- function(s){
rint <- s * (r2-r1)+r1
aint <- s * (a2-a1)+a1
gamma <- 1/(g*h^2)+1/g-2
if(abs(abs(beta)-pi/2)<1e-10){
bessel <- k2*aint
}else{
bessel <- ja(1,2*k2*aint*cos(beta))/cos(beta)
}
if(shape@curve == F){
return(vecnorm(k1)/4*gamma*aint*exp(2i*k1%*%rint/h)*bessel*vecnorm(r2-r1))
}else{
return(vecnorm(k1)*pc/4*gamma*aint*exp(2i*k2*pc)*exp(-2i*k2*pc*cos(beta))*bessel*(vecnorm(r2-r1)/pc))
}
}
SDWBAint <- Vectorize(SDWBAint)
integral <- myintegrate(SDWBAint,0,1)
fbs <- fbs + integral * exp(1i * rnorm(1,0,phase))
}
return(20*log10(abs(fbs)))
}
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0)
SDWBA <- function(shape=NULL, x=shape@rpos[1,], y=shape@rpos[2,], z=shape@rpos[3,],
c=1500, frequency, phase=0.0, tilt=shape@theta, a=shape@a, h=shape@h, g=shape@g, pc=shape@pc,
curve=ifelse(is.null(shape),F,shape@curve),
ncyl=ifelse(is.null(shape),length(x),shape@ncyl)){
require(elliptic)
rpos <- as.matrix(rbind(x,y,z))
kt <- cbind(cos(tilt),rep(0,length(tilt)),sin(tilt))
k1 <- kcalc(frequency,c)*kt; k2 <- vecnorm(k1) / h
fbs <- 0 + 0i
for(j in 1:(ncyl-1)){
r1 <- rpos[,j]; r2 <- rpos[,j+1]
a1 <- a[j]; a2 <- a[j+1]
beta <- abs(acos((k1%*%(r2-r1))/(vecnorm(k1)*vecnorm(r2-r1))) - pi/2)
SDWBAint <- function(s){
rint <- s * (r2-r1)+r1
aint <- s * (a2-a1)+a1
gamma <- 1/(g*h^2)+1/g-2
if(abs(abs(beta)-pi/2)<1e-10){
bessel <- k2*aint
}else{
bessel <- ja(1,2*k2*aint*cos(beta))/cos(beta)
}
if(curve == F){
return(vecnorm(k1)/4*gamma*aint*exp(2i*k1%*%rint/h)*bessel*vecnorm(r2-r1))
}else{
return(vecnorm(k1)*pc/4*gamma*aint*exp(2i*k2*pc)*exp(-2i*k2*pc*cos(beta))*bessel*(vecnorm(r2-r1)/pc))
}
}
SDWBAint <- Vectorize(SDWBAint)
integral <- myintegrate(SDWBAint,0,1)
fbs <- fbs + integral * exp(1i * rnorm(1,0,phase))
}
return(20*log10(abs(fbs)))
}
SDWBA(x=x,y=y,z=z,c=c,frequency=freq,phase=0,tilt=pi/2,a=a,h=h,g=g,pc=0)
?read.csv
document()
devtools::document()
roxygen2::roxygenise()
devtools::install_github("brandynlucca/acousticTS@test-branch")
read.csv(https://github.com/brandynlucca/acousticTS/blob/test-branch/data/mcgehee.csv)
read.csv("https://github.com/brandynlucca/acousticTS/blob/test-branch/data/mcgehee.csv"")
read.csv("https://github.com/brandynlucca/acousticTS/blob/test-branch/data/mcgehee.csv")
tar <- read.csv("https://github.com/brandynlucca/acousticTS/blob/test-branch/data/mcgehee.csv")
tar
head(tar)
rm(tar)
data(mcgehee)
head(mcgehee)
mcgehee
roxygen2::roxygenise()
roxygen2::roxygenise()
document()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
"cakrill"
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxyenise()
roxygen2::roxyenisze()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
devtools::check()
error
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github("brandynlucca/acousticTS@test-branch")
devtools::install_github("brandynlucca/acousticTS@test-branch")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("brandynlucca/acousticTS@test-branch")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("brandynlucca/acousticTS@test-branch")
install.packages("scales")
devtools::install_github("brandynlucca/acousticTS@test-branch")
remotes::update_packages("rlang")
remotes::update_packages("rlang")
devtools::install_github("brandynlucca/acousticTS@test-branch")
