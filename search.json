[{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Target strength for a calibration sphere","text":"Echosounders often calibrated using standard targets comprise strong scatterers target strengths (TS, dB re. 1 m2) relatively straightforward model predict1. Typically, comprises tungsten carbide (chemical formula: WC) sphere, elastic spheres consisting materials (e.g. aluminum, Al) can also used2.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"acousticts-implementation","dir":"Articles","previous_headings":"","what":"acousticTS implementation","title":"Target strength for a calibration sphere","text":"acousticTS package adapts series equations described literature3 provide solution wave equations based classical theory elasticity. object-based approach acousticTS makes relatively straightforward minimizing amount manual coding end-users must write.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"calibration-sphere-object-generation","dir":"Articles","previous_headings":"acousticTS implementation","what":"Calibration sphere object generation","title":"Target strength for a calibration sphere","text":"First, calibration sphere object created. represented CAL object class contains slots metadata, model_parameters, model results, body sphere dimensions material properties, shape_parameters shape-specific metadata. object can created using cal_generate(...) function two required arguments: material diameter. default diameter 38.1 mm, 38.1e-3 m. diameter input intended meters.material argument comprises five default options automatically include respective longitudinal transversal sound speeds (m s-1) material density (kg m-3): Alternatively, can define material properties assigning values sound_speed_longitudinal, sound_speed_transversal, density_sphere within cal_generate(...) : cal_generate(..., density_sphere = 1026) using default arguments:","code":"# Call in package library library(acousticTS) ##  ## Attaching package: 'acousticTS' ## The following object is masked from 'package:base': ##  ##     kappa # Create calibration sphere object cal_sphere <- cal_generate() # this is equivalent to: cal_sphere <- cal_generate(material = \"WC\", diameter = 38.1e-3)"},{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"calculating-a-ts-frequency-spectrum-for-the-calibration-sphere","dir":"Articles","previous_headings":"acousticTS implementation","what":"Calculating a TS-frequency spectrum for the calibration sphere","title":"Target strength for a calibration sphere","text":"calibration sphere object generated, TS can calculated via target_strength(...) function, wrapper function generally allows multiple models applied single scatterer needed. case, three required arguments calculate TS: object, frequency, model. object argument simply refers CAL object created (.e. cal_sphere). Frequency (via frequency) can vector values (Hz). Model string input refers model end-users like use, model = \"calibration\" case. update current CAL object assigned variable, can used generate copy original CAL object now includes model parameter results built-field.","code":"# Define frequency vector  frequency <- seq(1e3, 600e3, 1e3) # Calculate TS; update original CAL object cal_sphere <- target_strength(object = cal_sphere,                               frequency = frequency,                                model = \"calibration\") # Calculate TS; store in a new CAL object cal_sphere_copy <- target_strength(object = cal_sphere,                                    frequency = frequency,                                     model = \"calibration\")"},{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"extracting-model-results","dir":"Articles","previous_headings":"acousticTS implementation","what":"Extracting model results","title":"Target strength for a calibration sphere","text":"Model results can extracted either just visually, can directly accessed using extract(...) function.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"plotting-results","dir":"Articles","previous_headings":"acousticTS implementation > Extracting model results","what":"Plotting results","title":"Target strength for a calibration sphere","text":"approach uses plot(...) generic function additional arguments toggling plot output. additional arguments include : type = \"shape\" type = \"model\" nudge_y = 1.05 (default) nudge_x = 1.01 (default) x_units = \"frequency\" x_units = \"k_sw\" x_units = \"k_l\" x_units = \"k_t\" Setting type = \"model\" parse model results (.e. TS). two nudge_ arguments allow end-user nudge x- y-axes see fit. x_units argument defaults x_units = \"frequency\", setting equal \"k_sw\", \"k_l\", \"k_t\" set TS function wavenumber seawater, longitudinal axis sphere, transversal axis sphere, respectively multiplied sphere’s radius.","code":"# Plot TS as a function of frequency (kHz) plot(cal_sphere, type = \"model\", ylim = c(-70, -30)) # Plot TS as a function of k[sw]*radius, or k[sw]*a plot(cal_sphere, type = \"model\", x_units = \"k_sw\", ylim = c(-70, -30)) # Plot TS as a function of k[l]*radius, or k[sw]*a plot(cal_sphere, type = \"model\", x_units = \"k_l\", ylim = c(-70, -30)) # Plot TS as a function of k[t]*radius, or k[sw]*a plot(cal_sphere, type = \"model\", x_units = \"k_t\", ylim = c(-70, -30)) # Nudge the x-axis more plot(cal_sphere, type = \"model\", ylim = c(-70, -30)) # Nudge the y-axis more plot(cal_sphere, type = \"model\", ylim = c(-70, -30))"},{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"accessing-results","dir":"Articles","previous_headings":"acousticTS implementation > Extracting model results","what":"Accessing results","title":"Target strength for a calibration sphere","text":"model results can also directly accessed via extract(...) two arguments object feature. case, object refers CAL object, cal_sphere, can set feature = \"model\" extract model results. get seven columns formatted data.frame object: frequency: transmit frequency (Hz) k_sw: acoustic wavenumber seawater/ambient fluid k_l: longitudinal axis acoustic wavenumber sphere k_t: transversal axis acoustic wavenumber sphere f_bs: complex form function output sigma_bs: acoustic cross-section elastic sphere (m2) : σbs=πa2|fbs|2\\sigma_{bs} = \\pi ^2 ~|f_{bs}|^2 TS: target strength (dB re. 1 m2) elastic sphere : TS=10log10(σbs4π)TS = 10log_{10}(\\frac{\\sigma_{bs}}{4 \\pi})","code":"# Extract model results model_results <- extract( cal_sphere, \"model\" )$calibration # Peek at the output from extract(...) head( model_results ) ##   frequency         ka         f_bs     sigma_bs        TS ## 1      1000 0.07979645 9.444014e-05 8.918941e-09 -80.49687 ## 2      2000 0.15959291 3.738998e-04 1.398010e-07 -68.54490 ## 3      3000 0.23938936 8.269858e-04 6.839055e-07 -61.65004 ## 4      4000 0.31918581 1.435280e-03 2.060028e-06 -56.86127 ## 5      5000 0.39898227 2.174015e-03 4.726341e-06 -53.25475 ## 6      6000 0.47877872 3.012785e-03 9.076873e-06 -50.42064"},{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"material-property-and-sphere-shape-comparisons","dir":"Articles","previous_headings":"","what":"Material property and sphere shape comparisons","title":"Target strength for a calibration sphere","text":"implementation also allows comparisons among different model parameters diameters suited specific calibration experiments.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"comparing-different-diameters","dir":"Articles","previous_headings":"Material property and sphere shape comparisons","what":"Comparing different diameters","title":"Target strength for a calibration sphere","text":"","code":"# Generate models for calibration spheres # 20 mm diameter sphere sphere_20 <- cal_generate(diameter = 20e-3) sphere_20 <- target_strength(object = sphere_20,                              frequency = frequency,                              model = \"calibration\") ts_mods_20 <- extract(sphere_20, \"model\")$calibration # 30 mm diameter sphere sphere_30 <- cal_generate(diameter = 30e-3) sphere_30 <- target_strength(object = sphere_30,                              frequency = frequency,                              model = \"calibration\") ts_mods_30 <- extract(sphere_30, \"model\")$calibration # 40 mm diameter sphere sphere_40 <- cal_generate(diameter = 40e-3) sphere_40 <- target_strength(object = sphere_40,                              frequency = frequency,                              model = \"calibration\") ts_mods_40 <- extract(sphere_40, \"model\")$calibration # Plot the three and compare plot(x = ts_mods_20$frequency*1e-3,       y = ts_mods_20$TS,       type = 'l',      lty = 1,       lwd = 2.5,      xlab = \"Frequency (kHz)\",      ylab = expression(Target~strength~(dB~re.~1~m^2)),      cex.lab = 1.3,       cex.axis = 1.2,      ylim = c(-70, -30)) lines(x = ts_mods_30$frequency*1e-3,       y = ts_mods_30$TS,       col = 'red',       lty = 1,       lwd = 2.5) lines(x = ts_mods_40$frequency*1e-3,       y = ts_mods_40$TS,       col = 'blue',       lty = 1,       lwd = 2.5) legend(\"bottomright\",        c(\"20 mm\",\"30 mm\", \"40 mm\"),        lty=c(1, 1, 1),        lwd=c(2.5, 2.5, 2.5),        col=c('black', 'red', 'blue'),        cex=1.1)"},{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"comparing-different-materials","dir":"Articles","previous_headings":"Material property and sphere shape comparisons","what":"Comparing different materials","title":"Target strength for a calibration sphere","text":"","code":"# tungsten carbide ts_mods_WC <- extract(cal_sphere, \"model\")$calibration # copper sphere sphere_copper <- cal_generate(material = \"Cu\") sphere_copper <- target_strength(object = sphere_copper,                                  frequency = frequency,                                  model = \"calibration\") ts_mods_Cu <- extract(sphere_copper, \"model\")$calibration # aluminum sphere sphere_aluminum <- cal_generate(material = \"Al\") sphere_aluminum <- target_strength(object = sphere_aluminum,                                    frequency = frequency,                                    model = \"calibration\") ts_mods_Al <- extract(sphere_aluminum, \"model\")$calibration # brass sphere sphere_brass <- cal_generate(material = \"brass\") sphere_brass <- target_strength(object = sphere_brass,                                 frequency = frequency,                                 model = \"calibration\") ts_mods_brass <- extract(sphere_brass, \"model\")$calibration # stainless steel sphere sphere_steel <- cal_generate(material = \"steel\") sphere_steel <- target_strength(object = sphere_steel,                                 frequency = frequency,                                 model = \"calibration\") ts_mods_steel<- extract(sphere_steel, \"model\")$calibration # Plot each and compare par(ask = F,     oma = c(1, 1, 1, 0),     mar = c(3, 4.5, 1, 2)) plot(x = ts_mods_WC$frequency*1e-3,       y = ts_mods_WC$TS,       type = 'l',      lty = 1,       lwd = 2.5,      xlab = \"Frequency (kHz)\",      ylab = expression(Target~strength~(dB~re.~1~m^2)),      cex.lab = 1.3,       cex.axis = 1.2,      ylim = c(-90, -30)) lines(x = ts_mods_Cu$frequency*1e-3,       y = ts_mods_Cu$TS,       col = 'red',       lty = 1,       lwd = 2.5) lines(x = ts_mods_Al$frequency*1e-3,       y = ts_mods_Al$TS,       col = 'blue',       lty = 1,       lwd = 2.5) lines(x = ts_mods_brass$frequency*1e-3,       y = ts_mods_brass$TS,       col = 'green',       lty = 1,       lwd = 2.5) lines(x = ts_mods_steel$frequency*1e-3,       y = ts_mods_steel$TS,       col = 'orange',       lty = 1,       lwd = 2.5) legend(\"bottomright\",        c(\"WC\",\"Cu\", \"Al\", \"Brass\", \"Steel\"),        lty=c(1, 1, 1, 1, 1),        lwd=c(2.5, 2.5, 2.5, 2.5, 2.5),        col=c('black', 'red', 'blue', 'green', 'orange'),        cex=1.1)"},{"path":"https://brandynlucca.github.io/acousticTS/articles/calibration_sphere_target_strength_vignette.html","id":"future-development","dir":"Articles","previous_headings":"","what":"Future development","title":"Target strength for a calibration sphere","text":"Stay tuned new methods enabling backscatter simulations calibration spheres different materials, sizes, etc., single function rather repeating dataflow.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Target strength for elastic shelled spheres","text":"Elastic shelled spheres important scatterers marine acoustics, representing various zooplankton species organisms hard exoskeletons shells. scatterers consist outer elastic shell surrounding inner fluid medium. target strength (TS, dB re. 1 m2) scatterers can modeled using either exact modal series solutions1 high-frequency approximations2.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"acousticts-implementation","dir":"Articles","previous_headings":"","what":"acousticTS implementation","title":"Target strength for elastic shelled spheres","text":"acousticTS package provides two main approaches modeling elastic shelled spheres: exact modal series solution Goodman Stern (1962) high-frequency ray-based approximation Stanton (1989). object-based approach acousticTS makes implementing models straightforward handling complex mathematical calculations internally.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"elastic-shelled-sphere-object-generation","dir":"Articles","previous_headings":"acousticTS implementation","what":"Elastic shelled sphere object generation","title":"Target strength for elastic shelled spheres","text":"First, elastic shelled sphere object must created using ESS (Elastic Shelled Scatterer) object class. contains slots metadata, model_parameters, model results, shell properties, fluid properties, shape_parameters. object can created using ess_generate(...) function.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"required-parameters","dir":"Articles","previous_headings":"acousticTS implementation > Elastic shelled sphere object generation","what":"Required parameters","title":"Target strength for elastic shelled spheres","text":"ess_generate(...) function requires several key parameters: radius_shell: Outer radius shell (m) shell_thickness: Thickness shell (m) [optional, can calculated inner/outer radii] Shell material properties: density, sound speed, elastic constants Fluid material properties: density sound speed","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"material-properties-for-the-shell","dir":"Articles","previous_headings":"acousticTS implementation > Elastic shelled sphere object generation","what":"Material properties for the shell","title":"Target strength for elastic shelled spheres","text":"shell requires specification : - density_shell g_shell: Shell density (kg/m³) density contrast - sound_speed_shell h_shell: Shell sound speed (m/s) sound speed contrast - Elastic constants: K (bulk modulus), nu (Poisson’s ratio), G (shear modulus), E (Young’s modulus)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"material-properties-for-the-internal-fluid","dir":"Articles","previous_headings":"acousticTS implementation > Elastic shelled sphere object generation","what":"Material properties for the internal fluid","title":"Target strength for elastic shelled spheres","text":"internal fluid requires: - density_fluid g_fluid: Fluid density (kg/m³) density contrast - sound_speed_fluid h_fluid: Fluid sound speed (m/s) sound speed contrast","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"basic-example","dir":"Articles","previous_headings":"acousticTS implementation > Elastic shelled sphere object generation","what":"Basic example","title":"Target strength for elastic shelled spheres","text":"","code":"# Call in package library library(acousticTS) ##  ## Attaching package: 'acousticTS' ## The following object is masked from 'package:base': ##  ##     kappa # Create elastic shelled sphere object shelled_sphere <- ess_generate(   shape = \"sphere\",   radius_shell = 10e-3,        # 10 mm outer radius   shell_thickness = 1e-3,      # 1 mm shell thickness   sound_speed_shell = 3750,    # Shell sound speed (m/s)   sound_speed_fluid = 1575,    # Internal fluid sound speed (m/s)   density_shell = 2565,        # Shell density (kg/m³)   density_fluid = 1077.3,      # Internal fluid density (kg/m³)   K = 70e9,                    # Bulk modulus (Pa)   nu = 0.32                    # Poisson's ratio )  # Display the object shelled_sphere ## ESS-object  ##  Elastic-shelled scatterer  ##   ID: UID  ##  Material:   ##    Shell:  ##      Density: 2565 kg m^-3 ##      Sound speed: 3750 m s^-1 ##      Poisson's ratio: 0.32 ##      Bulk modulus (K): 7e+10 Pa ##      Young's modulus (E): 7.56e+10 Pa ##      Shear modulus (G): 28636363636.3636 Pa   ##    Internal fluid-like body:  ##      Density: 1077.3 kg m^-3 ##      Sound speed: 1575 m s^-1   ##  Shape:  ##    Shell:  ##      Radius: 0.01 m   ##      Diameter: 0.02 m   ##      Outer thickness: 0.001 m  ##    Internal fluid-like body:  ##      Radius: 0.009 m   ##      Diameter: 0.018 m   ##  Propagation direction of the incident sound wave: 1.571 radians"},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"calculating-a-ts-frequency-spectrum-for-the-elastic-shelled-sphere","dir":"Articles","previous_headings":"acousticTS implementation","what":"Calculating a TS-frequency spectrum for the elastic shelled sphere","title":"Target strength for elastic shelled spheres","text":"elastic shelled sphere object generated, TS can calculated using target_strength(...) function. function supports multiple models elastic shelled spheres: \"MSS_goodman_stern\": Exact modal series solution3 \"high_pass_stanton\": High-frequency ray-based approximation4","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"single-model-calculation","dir":"Articles","previous_headings":"acousticTS implementation > Calculating a TS-frequency spectrum for the elastic shelled sphere","what":"Single model calculation","title":"Target strength for elastic shelled spheres","text":"","code":"# Define frequency vector  frequency <- seq(1e3, 500e3, 1e3)  # 1 kHz to 500 kHz  # Calculate TS using the modal series solution shelled_sphere <- target_strength(   object = shelled_sphere,   frequency = frequency,    model = \"MSS_goodman_stern\" )"},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"multiple-model-comparison","dir":"Articles","previous_headings":"acousticTS implementation > Calculating a TS-frequency spectrum for the elastic shelled sphere","what":"Multiple model comparison","title":"Target strength for elastic shelled spheres","text":"","code":"# Calculate TS using both available models shelled_sphere <- target_strength(   object = shelled_sphere,   frequency = frequency,   model = c(\"MSS_goodman_stern\", \"high_pass_stanton\") )"},{"path":[]},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"shape-visualization","dir":"Articles","previous_headings":"acousticTS implementation > Visualizing results","what":"Shape visualization","title":"Target strength for elastic shelled spheres","text":"shape elastic shelled sphere can visualized using:","code":"# Plot the shape plot(shelled_sphere, type = \"shape\")"},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"model-results-visualization","dir":"Articles","previous_headings":"acousticTS implementation > Visualizing results","what":"Model results visualization","title":"Target strength for elastic shelled spheres","text":"Model results can plotted compare two approaches:","code":"# Plot TS as a function of frequency plot(shelled_sphere, type = \"model\")"},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"extracting-model-results","dir":"Articles","previous_headings":"acousticTS implementation","what":"Extracting model results","title":"Target strength for elastic shelled spheres","text":"Model results can extracted using extract(...) function analysis: modal series solution returns data.frame columns: - frequency: transmit frequency (Hz) - k_sw: acoustic wavenumber seawater/ambient fluid - k_shell_l: longitudinal acoustic wavenumber shell - k_shell_t: transversal acoustic wavenumber shell - f_bs: complex form function output - sigma_bs: acoustic cross-section (m²) - TS: target strength (dB re. 1 m²)","code":"# Extract modal series solution results mss_results <- extract(shelled_sphere, \"model\")$MSS_goodman_stern head(mss_results) ##   frequency  ka_shell   ka_fluid            f_bs     sigma_bs         TS ## 1      1000 0.0418879 0.03769911 0-1.962401e-06i 3.851016e-12 -114.14425 ## 2      2000 0.0837758 0.07539822 0-8.001423e-06i 6.402277e-11 -101.93666 ## 3      3000 0.1256637 0.11309734 0-1.834149e-05i 3.364103e-10  -94.73131 ## 4      4000 0.1675516 0.15079645 0-3.320975e-05i 1.102888e-09  -89.57469 ## 5      5000 0.2094395 0.18849556 0-5.284724e-05i 2.792830e-09  -85.53955 ## 6      6000 0.2513274 0.22619467 0-7.752180e-05i 6.009630e-09  -82.21152 # Extract high-pass approximation results hp_results <- extract(shelled_sphere, \"model\")$high_pass_stanton head(hp_results) ##   frequency       k1a      k_s         f_bs     sigma_bs         TS ## 1      1000 0.0418879 10.47198 9.723528e-11 9.723528e-11 -100.12176 ## 2      2000 0.0837758 20.94395 1.555591e-09 1.555591e-09  -88.08104 ## 3      3000 0.1256637 31.41593 7.871387e-09 7.871387e-09  -81.03949 ## 4      4000 0.1675516 41.88790 2.484524e-08 2.484524e-08  -76.04757 ## 5      5000 0.2094395 52.35988 6.049207e-08 6.049207e-08  -72.18302 ## 6      6000 0.2513274 62.83185 1.248180e-07 1.248180e-07  -69.03723"},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"parameter-sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Parameter sensitivity analysis","title":"Target strength for elastic shelled spheres","text":"implementation allows exploration different material properties geometric parameters affect target strength.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"effect-of-shell-thickness","dir":"Articles","previous_headings":"Parameter sensitivity analysis","what":"Effect of shell thickness","title":"Target strength for elastic shelled spheres","text":"","code":"# Create spheres with different shell thicknesses sphere_thin <- ess_generate(   radius_shell = 10e-3, shell_thickness = 0.5e-3,   sound_speed_shell = 3750, sound_speed_fluid = 1575,   density_shell = 2565, density_fluid = 1077.3,   K = 70e9, nu = 0.32 )  sphere_medium <- ess_generate(   radius_shell = 10e-3, shell_thickness = 1.0e-3,   sound_speed_shell = 3750, sound_speed_fluid = 1575,   density_shell = 2565, density_fluid = 1077.3,   K = 70e9, nu = 0.32 )  sphere_thick <- ess_generate(   radius_shell = 10e-3, shell_thickness = 2.0e-3,   sound_speed_shell = 3750, sound_speed_fluid = 1575,   density_shell = 2565, density_fluid = 1077.3,   K = 70e9, nu = 0.32 )  # Calculate TS for each sphere sphere_thin <- target_strength(sphere_thin, frequency, \"MSS_goodman_stern\") sphere_medium <- target_strength(sphere_medium, frequency, \"MSS_goodman_stern\") sphere_thick <- target_strength(sphere_thick, frequency, \"MSS_goodman_stern\")  # Extract results ts_thin <- extract(sphere_thin, \"model\")$MSS_goodman_stern ts_medium <- extract(sphere_medium, \"model\")$MSS_goodman_stern ts_thick <- extract(sphere_thick, \"model\")$MSS_goodman_stern  # Plot comparison plot(x = ts_thin$frequency * 1e-3,       y = ts_thin$TS,       type = 'l',      lty = 1,       lwd = 2.5,      xlab = \"Frequency (kHz)\",      ylab = expression(Target~strength~(dB~re.~1~m^2)),      cex.lab = 1.3,       cex.axis = 1.2)  lines(x = ts_medium$frequency * 1e-3,       y = ts_medium$TS,       col = 'red',       lty = 1,       lwd = 2.5)  lines(x = ts_thick$frequency * 1e-3,       y = ts_thick$TS,       col = 'blue',       lty = 1,       lwd = 2.5)  legend(\"bottomright\",        c(\"0.5 mm shell\", \"1.0 mm shell\", \"2.0 mm shell\"),        lty = c(1, 1, 1),        lwd = c(2.5, 2.5, 2.5),        col = c('black', 'red', 'blue'),        cex = 1.0)"},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"effect-of-material-properties","dir":"Articles","previous_headings":"Parameter sensitivity analysis","what":"Effect of material properties","title":"Target strength for elastic shelled spheres","text":"","code":"# Create spheres with different shell densities sphere_light <- ess_generate(   radius_shell = 10e-3, shell_thickness = 1e-3,   sound_speed_shell = 3750, sound_speed_fluid = 1575,   density_shell = 1500, density_fluid = 1077.3,  # Lighter shell   K = 70e9, nu = 0.32 )  sphere_heavy <- ess_generate(   radius_shell = 10e-3, shell_thickness = 1e-3,   sound_speed_shell = 3750, sound_speed_fluid = 1575,   density_shell = 4000, density_fluid = 1077.3,  # Heavier shell   K = 70e9, nu = 0.32 )  # Calculate TS sphere_light <- target_strength(sphere_light, frequency, \"MSS_goodman_stern\") sphere_heavy <- target_strength(sphere_heavy, frequency, \"MSS_goodman_stern\")  # Extract results ts_light <- extract(sphere_light, \"model\")$MSS_goodman_stern ts_heavy <- extract(sphere_heavy, \"model\")$MSS_goodman_stern  # Plot comparison plot(x = ts_medium$frequency * 1e-3,       y = ts_medium$TS,       type = 'l',      lty = 1,       lwd = 2.5,      xlab = \"Frequency (kHz)\",      ylab = expression(Target~strength~(dB~re.~1~m^2)),      cex.lab = 1.3,       cex.axis = 1.2)  lines(x = ts_light$frequency * 1e-3,       y = ts_light$TS,       col = 'red',       lty = 1,       lwd = 2.5)  lines(x = ts_heavy$frequency * 1e-3,       y = ts_heavy$TS,       col = 'blue',       lty = 1,       lwd = 2.5)  legend(\"bottomright\",        c(\"Medium density (2565 kg/m³)\", \"Light shell (1500 kg/m³)\", \"Heavy shell (4000 kg/m³)\"),        lty = c(1, 1, 1),        lwd = c(2.5, 2.5, 2.5),        col = c('black', 'red', 'blue'),        cex = 0.9)"},{"path":[]},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"modal-series-vs--high-pass-approximation","dir":"Articles","previous_headings":"Model validity and applications","what":"Modal series vs. high-pass approximation","title":"Target strength for elastic shelled spheres","text":"modal series solution (\"MSS_goodman_stern\") provides exact solution valid across frequencies, high-pass approximation (\"high_pass_stanton\") designed high-frequency applications wavelength much smaller scatterer size.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"biological-applications","dir":"Articles","previous_headings":"Model validity and applications","what":"Biological applications","title":"Target strength for elastic shelled spheres","text":"Elastic shelled spheres can represent various marine organisms: Pteropods: Pelagic gastropods calcium carbonate /aragonite shells Molluscs: Benthic organisms elastic shells Coccolithophores: Phytoplankton calcite plates models implemented provide theoretical foundation understanding acoustic backscatter important marine organisms.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/articles/elastic_shelled_sphere_target_strength_vignette.html","id":"future-development","dir":"Articles","previous_headings":"","what":"Future development","title":"Target strength for elastic shelled spheres","text":"Future enhancements may include: Additional shape options beyond spheres Temperature pressure dependencies material properties Frequency-dependent material properties Integration empirical scattering databases","code":""},{"path":"https://brandynlucca.github.io/acousticTS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brandyn Lucca. Author, maintainer.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lucca B (2025). acousticTS: Estimating acoustic target strength via physics-based scattering models. R package version 1.0.1, https://brandynlucca.github.io/acousticTS/.","code":"@Manual{,   title = {acousticTS: Estimating acoustic target strength via physics-based scattering models},   author = {Brandyn Lucca},   year = {2025},   note = {R package version 1.0.1},   url = {https://brandynlucca.github.io/acousticTS/}, }"},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"acousticts","dir":"","previous_headings":"","what":"Estimating acoustic target strength via physics-based scattering models","title":"Estimating acoustic target strength via physics-based scattering models","text":"Acoustic backscatter single target organism expressed intensity echo typically denoted backscattering cross-section (σbs, m2). Target strength (TS, dB re. 1 m2) logarithmic representation σbs : TS = 10 log10 (σbs). TS can used convert integrated (e.g. nautical area scattering coefficient, SA, dB re. 1(m2 nmi-2) volumetric backscatter (e.g. Sv, dB re. 1 m-1) collected fisheries acoustic surveys units number density, volumetric density fish school (.e. animals m-3). parameter can also aid classifying backscatter based multifrequency response targets, separating likely echoes large predatory fish smaller prey. several approaches estimating TS, one common method apply physics-based models predict theoretical TS comprise exact approximate solutions. models provided acousticTS package can help provide TS estimates parameterized using broad statitsical distributions inputs. package constant state development updates available model library, computational efficiency, quality--life improvements. Latest release DOI https://doi.org/10.5281/zenodo.7600659 General DOI","code":""},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimating acoustic target strength via physics-based scattering models","text":"can install current released version acousticTS via: can install development version acousticTS like :","code":"devtools::install_github(\"brandynlucca/acousticTS\") devtools::install_github(\"brandynlucca/acousticTS@test-branch\")"},{"path":[]},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"two-ray-model-for-uniformly-bent-fluid-like-cylinders-dcm","dir":"","previous_headings":"Models currently available","what":"Two-ray model for uniformly bent fluid-like cylinders (DCM)","title":"Estimating acoustic target strength via physics-based scattering models","text":"Stanton, T.K., Clay, C.S., Chu, D. (1993). Ray representation sound scattering weakly scattering deformed fluid cylinders: Simple physics application zooplankton. J. Acoust. Soc. ., 94, 3454-3462.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"distorted-wave-born-approximation-dwba","dir":"","previous_headings":"Models currently available","what":"Distorted wave Born approximation (DWBA)","title":"Estimating acoustic target strength via physics-based scattering models","text":"Stanton, T.K., Chu, D., Wiebe, P.H. (1998). Sound scattering several zooplankton groups. II. Scattering models. J. Acoust. Soc. ., 103, 236-253.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"stochastic-distorted-wave-born-approximation-sdwba","dir":"","previous_headings":"Models currently available","what":"Stochastic distorted wave Born approximation (SDWBA)","title":"Estimating acoustic target strength via physics-based scattering models","text":"Demer, D.., Conti, S.G. 2003. Reconciling theoretical versus empirical target strengths krill: effects phase variability distorted-wave Born approximation. ICES J. Mar. Sci., 60, 429-434.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"sdwba-for-uniformly-bent-scatterers-sdwba_curved","dir":"","previous_headings":"Models currently available","what":"SDWBA for uniformly bent scatterers (SDWBA_curved)","title":"Estimating acoustic target strength via physics-based scattering models","text":"Demer, D.., Conti, S.G. 2003. Reconciling theoretical versus empirical target strengths krill: effects phase variability distorted-wave Born approximation. ICES J. Mar. Sci., 60, 429-434. Stanton, T.K., Chu, D., Wiebe, P.H. (1998). Sound scattering several zooplankton groups. II. Scattering models. J. Acoust. Soc. ., 103, 236-253.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"kirchoff-ray-mode-approximation-krm","dir":"","previous_headings":"Models currently available","what":"Kirchoff-ray mode approximation (KRM)","title":"Estimating acoustic target strength via physics-based scattering models","text":"Clay C.S. Horne J.K. (1994). Acoustic models fish: Atlantic cod (Gadus morhua). J. Acoust. Soc. ., 96, 1661-1668.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"modal-series-solution-for-gas-filled-fluid-spheres-mss_anderson","dir":"","previous_headings":"Models currently available","what":"Modal series solution for gas-filled fluid spheres (MSS_anderson)","title":"Estimating acoustic target strength via physics-based scattering models","text":"Anderson, V.C. (1950). Sound scattering fluid sphere. J. Acoust. Soc. ., 22, 426-431.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"homogeneous-solid-sphere-calibration","dir":"","previous_headings":"Models currently available","what":"Homogeneous solid sphere (calibration)","title":"Estimating acoustic target strength via physics-based scattering models","text":"MacLennan D. N. (1981). theory solid spheres sonar calibration targets. Scottish Fisheries Research . 22, Department Agriculture Fisheries Scotland.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Estimating acoustic target strength via physics-based scattering models","text":"examples different models used predict TS sardine gas-filled swimbladder, tungsten carbide calibration sphere, crustacean modeled prolate spheroid, generic gas-filled bubble.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"kirchoff-ray-mode-approximation-for-a-sardine-with-a-gas-filled-swimbladder","dir":"","previous_headings":"Examples","what":"Kirchoff Ray-Mode approximation for a Sardine with a gas-filled swimbladder","title":"Estimating acoustic target strength via physics-based scattering models","text":"","code":"library( acousticTS ) ##  ## Attaching package: 'acousticTS' ## The following object is masked from 'package:base': ##  ##     kappa ### Call in the built-in sardine shape dataset data( sardine ) ### Inspect the object print( sardine ) ## SBF-object  ##   Fluid-like scatterer  ##    ID: Sardinops sagax caerulea (Conti and Demer, 2003)  ##  Body dimensions: ##   Length: 0.21 m (n = 379 cylinders)  ##   Mean radius: 0.0097 m | Max radius: 0.0133 m  ##  Bladder dimensions: ##   Length: 0.085 m (n = 154 cylinders)  ##   Mean radius: 0.0048 m | Max radius: 0.0078 m  ##  Body material properties: ##   Density: 1070 kg m^-3 | Sound speed: 1570 m s^-1  ##  Bladder fluid material properties: ##   Density: 1.24 kg m^-3 | Sound speed: 345 m s^-1  ##  Body orientation (relative to transducer face/axis): 1.571 radians plot( sardine ) ### We will now define a frequency range to predict TS over frequency <- seq( 1e3 , 400e3 , 1e3 ) ### And now we use the target_strength(...) function to model TS for this fish sardine <- target_strength( sardine,                              frequency = frequency,                              model = \"KRM\" ) ## KRM model for SBF-object: Sardinops sagax caerulea (Conti and Demer, 2003) initialized. ### Plot results plot( sardine, type = 'model' ) ### Extract model results sardine_ts <- extract( sardine , \"model\") $KRM"},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"calibration-sphere","dir":"","previous_headings":"Examples","what":"Calibration sphere","title":"Estimating acoustic target strength via physics-based scattering models","text":"","code":"### Let's create a calibration sphere  ### Default inputs here are a 38.1 mm diameter and a tungsten carbide  ### (WC) material properties. cal_sphere <- cal_generate( ) ### We will use the same frequency range as the previous example ### Calculate TS cal_sphere <- target_strength( object = cal_sphere,                                frequency = frequency,                                model = \"calibration\" ) ## CALIBRATION model for CAL-object: Calibration sphere initialized. ### Plot results plot( cal_sphere , type = 'model' ) ### Extract model results calibration_ts <- extract( cal_sphere , \"model\" )$calibration"},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"fluid-sphere-anderson-1950","dir":"","previous_headings":"Examples","what":"Fluid sphere (Anderson, 1950)","title":"Estimating acoustic target strength via physics-based scattering models","text":"","code":"### Let's create a gas-filled bubble with a raidus of 4 mm ### This defaults to a density contrast, g_body, of 0.0012 ### This defaults to a soundspeed contrast, h_body, of 0.220 bubble <- gas_generate( radius = 4e-3 ,                         ID = \"gas bubble\" ) print( bubble ) ## GAS-object  ##   Gas- and fluid-filled scatterer  ##    ID: gas bubble  ##  Body dimensions: ##   Diameter: 0.008 m  ##   Radius: 0.004 m  ##  Material properties: ##   g: 0.0012  ##   h: 0.22 ### Model TS using the Anderson (1950) model bubble <- target_strength( bubble,                            frequency = seq( 1e3 , 300e3 , 0.5e3 ) ,                            model = \"MSS_anderson\" ) ## MSS_ANDERSON model for GAS-object: gas bubble initialized. ### Plot results plot( bubble , type = 'model' )"},{"path":"https://brandynlucca.github.io/acousticTS/index.html","id":"fluid-like-crustacean-prolate-spheroid-using-the-distorted-born-wave-approximation-dwba-and-ray-based-deformed-cylinder-model-dcm","dir":"","previous_headings":"Examples","what":"Fluid-like crustacean (prolate spheroid) using the distorted Born wave approximation (DWBA) and ray-based deformed cylinder model (DCM)","title":"Estimating acoustic target strength via physics-based scattering models","text":"","code":"### First let's create a prolate spheroid shape  ### 25 mm long with a length-to-radius ratio of 16 crustacean <- fls_generate( shape = \"prolate_spheroid\" ,                             length_body = 25.0e-3 ,                              length_radius_ratio = 16 ,                             radius_curvature_ratio = 3.3 ,                             g_body = 1.03 ,                             h_body = 1.02 ) print( crustacean ) ## FLS-object  ##   Fluid-like scatterer  ##    ID: UID  ##  Body dimensions: ##   Length: 0.025 m (n = 19 cylinders)  ##   Mean radius: 0.0011 m  ##   Max radius: 0.0016 m  ##  Shape parameters: ##   Defined shape: prolate_spheroid  ##   L/a ratio: 16  ##   Taper order:   ##  Material properties: ##   g: 1.03  ##   h: 1.02  ##  Body orientation (relative to transducer face/axis): 1.571 radians plot( crustacean ) ### Model TS using the ray-path deformed cylinder model (DCM), distorted wave ### Born approximation (DWBA), the stochastic variation of the DWBA (SDWBA) ,  ### and specifically curved versions of both the DWBA and SDWBA  crustacean <- target_strength( crustacean ,                                frequency = seq( 1e3 , 200e3 , 1e3 ) ,                                model = c( \"DCM\" , \"DWBA\" , \"SDWBA\" ,                                           \"DWBA_curved\" , \"SDWBA_curved\" ) ) ## DCM model for FLS-object: UID initialized. ##  ## DWBA model for FLS-object: UID initialized. ##  ## SDWBA model for FLS-object: UID initialized. ##  ## DWBA_CURVED model for FLS-object: UID initialized. ##  ## SDWBA_CURVED model for FLS-object: UID initialized. ##  ## Beginning TS modeling via DCM model for FLS-object: UID  ## DCM TS model predictions for FLS-object: UID complete. ##  ## Beginning TS modeling via DWBA model for FLS-object: UID  ## DWBA TS model predictions for FLS-object: UID complete. ##  ## Beginning TS modeling via SDWBA model for FLS-object: UID  ## SDWBA TS model predictions for FLS-object: UID complete. ##  ## Beginning TS modeling via DWBA_CURVED model for FLS-object: UID  ## DWBA_CURVED TS model predictions for FLS-object: UID complete. ##  ## Beginning TS modeling via SDWBA_CURVED model for FLS-object: UID  ## SDWBA_CURVED TS model predictions for FLS-object: UID complete. ### Plot results plot( crustacean , type = 'model' )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/CAL.html","id":null,"dir":"Reference","previous_headings":"","what":"Solid and calibration sphere (CAL) object/class. — CAL-class","title":"Solid and calibration sphere (CAL) object/class. — CAL-class","text":"S4 class provides slots contain relevant metadata solid sphere objects belonging CAL-class scatterers. object created using parameters specific outer shell. default behavior object reference outer elastic shell properties exceptions model-dependent. See scatterer-class detailed description S4 object organized.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/DCM.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the theoretical TS of a target using the deformed cylinder model (DCM). — DCM","title":"Calculates the theoretical TS of a target using the deformed cylinder model (DCM). — DCM","text":"Calculates theoretical TS target using deformed cylinder model (DCM).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/DCM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the theoretical TS of a target using the deformed cylinder model (DCM). — DCM","text":"","code":"DCM( object )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/DCM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the theoretical TS of a target using the deformed cylinder model (DCM). — DCM","text":"object FLS-class scatterer.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/DCM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the theoretical TS of a target using the deformed cylinder model (DCM). — DCM","text":"Target strength (TS, dB re. 1 \\(m^2\\)) FLS-class object. #' @references Stanton, T.K., Chu, D., Wiebe, P.H. 1998. Sound scattering several zooplankton groups. II. Scattering models. Journal Acoustical Society America, 103(1), 236-253.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/DWBA.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the distorted Born wave approximation (DWBA) model. — DWBA","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the distorted Born wave approximation (DWBA) model. — DWBA","text":"Calculates theoretical TS fluid-like scatterer given frequency using distorted Born wave approximation (DWBA) model.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/DWBA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the distorted Born wave approximation (DWBA) model. — DWBA","text":"","code":"DWBA(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/DWBA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the distorted Born wave approximation (DWBA) model. — DWBA","text":"object FLS-class scatterer.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/DWBA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the distorted Born wave approximation (DWBA) model. — DWBA","text":"Stanton, T.K., Chu, D., Wiebe, P.H. 1998. Sound scattering several zooplankton groups. II. Scattering models. J. Acoust. Soc. ., 103, 236-253. Demer, D.., Conti, S.G. 2003. Reconciling theoretical versus empirical target strengths krill: effects phase variability distorted-wave Born approximation. ICES J. Mar. Sci., 60: 429-434.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/DWBA_curved.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the distorted Born wave approximation (DWBA) model. — DWBA_curved","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the distorted Born wave approximation (DWBA) model. — DWBA_curved","text":"Calculates theoretical TS fluid-like scatterer given frequency using distorted Born wave approximation (DWBA) model.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/DWBA_curved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the distorted Born wave approximation (DWBA) model. — DWBA_curved","text":"","code":"DWBA_curved(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/DWBA_curved.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the distorted Born wave approximation (DWBA) model. — DWBA_curved","text":"object FLS-class scatterer.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/DWBA_curved.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the distorted Born wave approximation (DWBA) model. — DWBA_curved","text":"Stanton, T.K., Chu, D., Wiebe, P.H. 1998. Sound scattering several zooplankton groups. II. Scattering models. J. Acoust. Soc. ., 103, 236-253. Demer, D.., Conti, S.G. 2003. Reconciling theoretical versus empirical target strengths krill: effects phase variability distorted-wave Born approximation. ICES J. Mar. Sci., 60: 429-434.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ESS.html","id":null,"dir":"Reference","previous_headings":"","what":"Elastic shelled scatterer (ESS) object/class. — ESS-class","title":"Elastic shelled scatterer (ESS) object/class. — ESS-class","text":"S4 class provides slots contain relevant metadata elastic shelled scatterers/objects belonging ESS-class. object can created using values outer shell internal tissues, applicable. default behavior type object reference outer shell exceptions model-dependent. See scatterer-class detailed description S4 object organized.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/FLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Fluid-like scatterer (FLS) object/class. — FLS-class","title":"Fluid-like scatterer (FLS) object/class. — FLS-class","text":"S4 class provides slots contain relevant metadata scatterers similar surrounding fluid medium (.e fluid-like) belonging FLS-class scatterers. See scatterer-class detailed description S4 object organized.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/GAS.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic gas-filled scatterer (GAS) object/class. — GAS-class","title":"Generic gas-filled scatterer (GAS) object/class. — GAS-class","text":"S4 class provides slots contain relevant metadata gas-bearing scatterers belonging GAS-class. object can include simple gas-filled bubbles scatterers gas occlusions, swimbladders, internal features, applicable. default behavior type object reference gaseous/fluid feature excpetions model-dependent. See scatterer-class detailed description S4 object organized.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/KRM.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the theoretical TS using Kirchoff-ray Mode approximation. — KRM","title":"Calculates the theoretical TS using Kirchoff-ray Mode approximation. — KRM","text":"Calculates theoretical TS using Kirchoff-ray Mode approximation.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/KRM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the theoretical TS using Kirchoff-ray Mode approximation. — KRM","text":"","code":"KRM(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/KRM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the theoretical TS using Kirchoff-ray Mode approximation. — KRM","text":"object Desired object/animal shape. Must class \"SBF\".","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/KRM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the theoretical TS using Kirchoff-ray Mode approximation. — KRM","text":"Target strength (TS, dB re: 1 m^2)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/KRM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the theoretical TS using Kirchoff-ray Mode approximation. — KRM","text":"Calculates theoretical TS using Kirchoff-ray Mode model.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/KRM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates the theoretical TS using Kirchoff-ray Mode approximation. — KRM","text":"Clay C.S. Horne J.K. (1994). Acoustic models fish: Atlantic cod (Gadus morhua). Journal Acoustical Society AMerica, 96, 1661-1668.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_anderson.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the theoretical TS of a fluid sphere using an exact modal series solution proposed by Andersen (1950). — MSS_anderson","title":"Calculates the theoretical TS of a fluid sphere using an exact modal series solution proposed by Andersen (1950). — MSS_anderson","text":"Calculates theoretical TS fluid sphere using exact modal series solution proposed Andersen (1950).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_anderson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the theoretical TS of a fluid sphere using an exact modal series solution proposed by Andersen (1950). — MSS_anderson","text":"","code":"MSS_anderson(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_anderson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the theoretical TS of a fluid sphere using an exact modal series solution proposed by Andersen (1950). — MSS_anderson","text":"object GAS- SBF-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_anderson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the theoretical TS of a fluid sphere using an exact modal series solution proposed by Andersen (1950). — MSS_anderson","text":"Target strength (TS, dB re: 1 m^2)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_anderson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the theoretical TS of a fluid sphere using an exact modal series solution proposed by Andersen (1950). — MSS_anderson","text":"Calculates theoretical TS fluid sphere given frequency using exact modal series solution.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_anderson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates the theoretical TS of a fluid sphere using an exact modal series solution proposed by Andersen (1950). — MSS_anderson","text":"Anderson, V.C. (1950). Sound scattering fluid sphere. Journal Acoustical Society America, 22, 426-431.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_goodman_stern.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the theoretical TS of an elastic-shelled sphere using the modal series solution from Goodman and Stern (1962). — MSS_goodman_stern","title":"Calculates the theoretical TS of an elastic-shelled sphere using the modal series solution from Goodman and Stern (1962). — MSS_goodman_stern","text":"Calculates theoretical TS elastic-shelled sphere using modal series solution Goodman Stern (1962).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_goodman_stern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the theoretical TS of an elastic-shelled sphere using the modal series solution from Goodman and Stern (1962). — MSS_goodman_stern","text":"","code":"MSS_goodman_stern(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_goodman_stern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the theoretical TS of an elastic-shelled sphere using the modal series solution from Goodman and Stern (1962). — MSS_goodman_stern","text":"object GAS- SBF-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_goodman_stern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the theoretical TS of an elastic-shelled sphere using the modal series solution from Goodman and Stern (1962). — MSS_goodman_stern","text":"Target strength (TS, dB re: 1 m^2)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_goodman_stern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the theoretical TS of an elastic-shelled sphere using the modal series solution from Goodman and Stern (1962). — MSS_goodman_stern","text":"Calculates theoretical TS elastic-shelled sphere using exact modal series solution","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/MSS_goodman_stern.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates the theoretical TS of an elastic-shelled sphere using the modal series solution from Goodman and Stern (1962). — MSS_goodman_stern","text":"Goodman, R.R., Stern, R. (1962). Reflection transmission sound elastic spherical shells. Journal Acoustical Society America, 34, 338-344.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/Pn.html","id":null,"dir":"Reference","previous_headings":"","what":"Legendre Polynomial function (Pn) of the first kind. — Pn","title":"Legendre Polynomial function (Pn) of the first kind. — Pn","text":"Legendre Polynomial function (Pn) first kind.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/Pn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Legendre Polynomial function (Pn) of the first kind. — Pn","text":"","code":"Pn(n, x)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/Pn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Legendre Polynomial function (Pn) of the first kind. — Pn","text":"n Degree Legendre polynomial x Real value","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/Pn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Legendre Polynomial function (Pn) of the first kind. — Pn","text":"Returns matrix array calculated computing outer product generates series values evaluated vector.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/SBF.html","id":null,"dir":"Reference","previous_headings":"","what":"Swimbladdered fish (SBF) object/class. — SBF-class","title":"Swimbladdered fish (SBF) object/class. — SBF-class","text":"S4 class provides slots contain relevant animal metadata parameterizing models swimbladdered fish (SBF) partitioned two sets discretized cylinders: body swimbladder. shapes comprise independent position matrices, material properties, orientations, relevant shape-related data metadata.See scatterer-class detailed description S4 object organized.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/SDWBA.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the stochastic distorted Born wave approximation (DWBA) model. — SDWBA","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the stochastic distorted Born wave approximation (DWBA) model. — SDWBA","text":"Calculates theoretical TS fluid-like scatterer given frequency using stochastic distorted Born wave approximation (DWBA) model.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/SDWBA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the stochastic distorted Born wave approximation (DWBA) model. — SDWBA","text":"","code":"SDWBA(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/SDWBA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the stochastic distorted Born wave approximation (DWBA) model. — SDWBA","text":"object FLS-class scatterer.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/SDWBA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the stochastic distorted Born wave approximation (DWBA) model. — SDWBA","text":"Demer, D.., Conti, S.G. 2003. Reconciling theoretical versus empirical target strengths krill: effects phase variability distorted-wave Born approximation. ICES J. Mar. Sci., 60: 429-434.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/SDWBA_curved.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the stochastic distorted Born wave approximation (DWBA) model using Eq. (6) froom Stanton et al. (1998). — SDWBA_curved","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the stochastic distorted Born wave approximation (DWBA) model using Eq. (6) froom Stanton et al. (1998). — SDWBA_curved","text":"Calculates theoretical TS fluid-like scatterer given frequency using stochastic distorted Born wave approximation (DWBA) model using Eq. (6) froom Stanton et al. (1998).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/SDWBA_curved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the stochastic distorted Born wave approximation (DWBA) model using Eq. (6) froom Stanton et al. (1998). — SDWBA_curved","text":"","code":"SDWBA_curved(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/SDWBA_curved.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the stochastic distorted Born wave approximation (DWBA) model using Eq. (6) froom Stanton et al. (1998). — SDWBA_curved","text":"object FLS-class scatterer.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/SDWBA_curved.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates the theoretical TS of a fluid-like scatterer at a given frequency using the stochastic distorted Born wave approximation (DWBA) model using Eq. (6) froom Stanton et al. (1998). — SDWBA_curved","text":"Stanton, T.K., Chu, D., Wiebe, P.H. 1998. Sound scattering several zooplankton groups. II. Scattering models. J. Acoust. Soc. ., 103, 236-253.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/along_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Along-matrix summing function — along_sum","title":"Along-matrix summing function — along_sum","text":"Along-matrix summing function","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/along_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Along-matrix summing function — along_sum","text":"","code":"along_sum(rpos, iterations)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/along_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Along-matrix summing function — along_sum","text":"rpos Position vector iterations Number iterations","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/arbitrary.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates arbitrary body shape from user inputs — arbitrary","title":"Creates arbitrary body shape from user inputs — arbitrary","text":"Creates arbitrary body shape user inputs","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/arbitrary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates arbitrary body shape from user inputs — arbitrary","text":"","code":"arbitrary(x_body, y_body, z_body, radius_body, length_units = \"m\")"},{"path":"https://brandynlucca.github.io/acousticTS/reference/arbitrary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates arbitrary body shape from user inputs — arbitrary","text":"x_body x-axis (m) y_body y-axis (m) z_body z-axis (m) radius_body Radius (m) length_units Units body length. Defaults meters: \"m\"","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/bladder_rotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Support rotation function for KRM (swimbladder) — bladder_rotation","title":"Support rotation function for KRM (swimbladder) — bladder_rotation","text":"Support rotation function KRM (swimbladder)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/bladder_rotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support rotation function for KRM (swimbladder) — bladder_rotation","text":"","code":"bladder_rotation(sum_rpos, rpos, theta, k_length)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/bladder_rotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support rotation function for KRM (swimbladder) — bladder_rotation","text":"sum_rpos Summed position matrix rpos Position matrix theta Orientation angle k_length Length wavenumber vector","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/body_rotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Support rotating function for KRM (body) — body_rotation","title":"Support rotating function for KRM (body) — body_rotation","text":"Support rotating function KRM (body)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/body_rotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support rotating function for KRM (body) — body_rotation","text":"","code":"body_rotation(sum_rpos, rpos, theta, k_length)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/body_rotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support rotating function for KRM (body) — body_rotation","text":"sum_rpos Summed position matrix rpos Position matrix theta Orientation angle k_length Length wavenumber vector","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/brake.html","id":null,"dir":"Reference","previous_headings":"","what":"Support function for bending scatterer body shape and position matrix — brake","title":"Support function for bending scatterer body shape and position matrix — brake","text":"Support function bending scatterer body shape position matrix","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/brake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support function for bending scatterer body shape and position matrix — brake","text":"","code":"brake(input, radius_curvature, mode = \"ratio\")"},{"path":"https://brandynlucca.github.io/acousticTS/reference/brake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support function for bending scatterer body shape and position matrix — brake","text":"input Dataframe scatterer-class object radius_curvature Radius curvature can parameterized either ratio relative body length actual measurement mode Either \"ratio\" \"measurement\"","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/brake_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Support function for bending scatterer position matrix dataframe — brake_df","title":"Support function for bending scatterer position matrix dataframe — brake_df","text":"Support function bending scatterer position matrix dataframe","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/brake_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support function for bending scatterer position matrix dataframe — brake_df","text":"","code":"brake_df(body_df, radius_curvature, mode = \"ratio\")"},{"path":"https://brandynlucca.github.io/acousticTS/reference/brake_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support function for bending scatterer position matrix dataframe — brake_df","text":"body_df Dataframe object containing body shape information radius_curvature Radius curvature can parameterized either ratio relative body length actual measurement mode Either \"ratio\" \"measurement\"","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/brake_scatterer.html","id":null,"dir":"Reference","previous_headings":"","what":"Support function for bending scatterer body shape scatterer object — brake_scatterer","title":"Support function for bending scatterer body shape scatterer object — brake_scatterer","text":"Support function bending scatterer body shape scatterer object","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/brake_scatterer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support function for bending scatterer body shape scatterer object — brake_scatterer","text":"","code":"brake_scatterer(object, radius_curvature, mode = \"ratio\")"},{"path":"https://brandynlucca.github.io/acousticTS/reference/brake_scatterer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support function for bending scatterer body shape scatterer object — brake_scatterer","text":"object Scatterer-class object radius_curvature Radius curvature can parameterized either ratio relative body length actual measurement mode Either \"ratio\" \"measurement\"","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the bulk modulus (K). — bulk","title":"Calculate the bulk modulus (K). — bulk","text":"Calculate bulk modulus (K) two three elastic moduli calculate Lamé's parameter. two values input, function default using Young's (E) shear (G) moduli. assumes input values represent 3D material properties.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the bulk modulus (K). — bulk","text":"","code":"bulk(E = NULL, G = NULL, nu = NULL)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the bulk modulus (K). — bulk","text":"E Young's modulus (Pa). G Shear modulus (Pa). nu Poisson's ratio (Dimensionless).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the bulk modulus (K). — bulk","text":"Returns estimate bulk modulus (K).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_generate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a CAL-class object. — cal_generate","title":"Generate a CAL-class object. — cal_generate","text":"Generate CAL-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_generate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a CAL-class object. — cal_generate","text":"","code":"cal_generate(   material = \"WC\",   diameter = 0.0381,   sound_speed_longitudinal = NULL,   sound_speed_transversal = NULL,   density_sphere = NULL,   theta_sphere = pi,   ID = NULL,   diameter_units = \"m\",   theta_units = \"radians\",   n_segments = 100 )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_generate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a CAL-class object. — cal_generate","text":"material Material-type soldi sphere. See 'Details' built-material options. diameter Spherical diameter (m). sound_speed_longitudinal Longitudinal sound speed (m/s). sound_speed_transversal Transversal sound speed (m/s). density_sphere Density (kg/m^3). theta_sphere Backscattering direction (Default: pi radians). ID Optional metadata ID input. diameter_units Units diameter. Defaults \"m\". theta_units Units direction. Defaults \"radians\". n_segments Number segments discretize object shape.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_generate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a CAL-class object. — cal_generate","text":"Generates CAL-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_generate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a CAL-class object. — cal_generate","text":"several options material argument:","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting for CAL-class objects — cal_plot","title":"Plotting for CAL-class objects — cal_plot","text":"Plotting CAL-class objects","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting for CAL-class objects — cal_plot","text":"","code":"cal_plot(   object,   type = \"shape\",   nudge_y = 1.01,   nudge_x = 1.01,   x_units = \"frequency\",   ... )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting for CAL-class objects — cal_plot","text":"object CAL-class object. type Toggle body shape (\"shape\") modeling results (\"model\") nudge_y y-axis nudge. nudge_x x-axis nudge. x_units \"model\" selected, toggle frequency (\"frequency\", kHz) ka (\"ka\"). ... Additional plot inputs","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_show.html","id":null,"dir":"Reference","previous_headings":"","what":"show(...) for CAL-class objects. — cal_show","title":"show(...) for CAL-class objects. — cal_show","text":"show(...) CAL-class objects.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show(...) for CAL-class objects. — cal_show","text":"","code":"cal_show(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/cal_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show(...) for CAL-class objects. — cal_show","text":"object CAL-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_bessel_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Bessel function cache for the Goodman and Stern (1962) model — calculate_bessel_cache","title":"Calculate Bessel function cache for the Goodman and Stern (1962) model — calculate_bessel_cache","text":"Calculate Bessel function cache Goodman Stern (1962) model","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_bessel_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Bessel function cache for the Goodman and Stern (1962) model — calculate_bessel_cache","text":"","code":"calculate_bessel_cache(ka_matrix_m, m)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_bessel_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Bessel function cache for the Goodman and Stern (1962) model — calculate_bessel_cache","text":"ka_matrix_m Modal ka matrix m Modal vector","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_bessel_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Bessel function cache for the Goodman and Stern (1962) model — calculate_bessel_cache","text":"Cached Bessel function values","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_goodman_stern_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate alpha coefficients for Goodman-Stern model — calculate_goodman_stern_alpha","title":"Calculate alpha coefficients for Goodman-Stern model — calculate_goodman_stern_alpha","text":"Calculate alpha coefficients Goodman-Stern model","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_goodman_stern_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate alpha coefficients for Goodman-Stern model — calculate_goodman_stern_alpha","text":"","code":"calculate_goodman_stern_alpha(   bessel_cache,   ka_matrix_m,   m,   lambda,   mu,   density_sw,   density_shell,   density_fluid )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_goodman_stern_alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate alpha coefficients for Goodman-Stern model — calculate_goodman_stern_alpha","text":"bessel_cache Cached Bessel function values ka_matrix_m Modal ka matrix m Modal vector lambda Lamé first parameter mu Shear modulus density_sw Seawater density density_shell Shell density density_fluid Fluid density","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_goodman_stern_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate alpha coefficients for Goodman-Stern model — calculate_goodman_stern_alpha","text":"List alpha coefficients","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_goodman_stern_boundary_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate boundary condition matrices for Goodman and Stern (1962) model — calculate_goodman_stern_boundary_matrices","title":"Calculate boundary condition matrices for Goodman and Stern (1962) model — calculate_goodman_stern_boundary_matrices","text":"Calculate boundary condition matrices Goodman Stern (1962) model","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_goodman_stern_boundary_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate boundary condition matrices for Goodman and Stern (1962) model — calculate_goodman_stern_boundary_matrices","text":"","code":"calculate_goodman_stern_boundary_matrices(alpha, ka_matrix, m)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_goodman_stern_boundary_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate boundary condition matrices for Goodman and Stern (1962) model — calculate_goodman_stern_boundary_matrices","text":"alpha Alpha coefficient list ka_matrix ka matrix m Modal vector","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_goodman_stern_boundary_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate boundary condition matrices for Goodman and Stern (1962) model — calculate_goodman_stern_boundary_matrices","text":"List boundary matrices frequency modal order","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_ka_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ka matrix for Goodman and Stern (1962) model — calculate_ka_matrix","title":"Calculate ka matrix for Goodman and Stern (1962) model — calculate_ka_matrix","text":"Calculate ka matrix Goodman Stern (1962) model","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_ka_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ka matrix for Goodman and Stern (1962) model — calculate_ka_matrix","text":"","code":"calculate_ka_matrix(   frequency,   sound_speed_sw,   sound_speed_fluid,   sound_speed_longitudinal,   sound_speed_transversal,   radius_shell,   radius_fluid )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_ka_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ka matrix for Goodman and Stern (1962) model — calculate_ka_matrix","text":"frequency Frequency vector sound_speed_sw Seawater sound speed sound_speed_fluid Fluid sound speed sound_speed_longitudinal Longitudinal sound speed shell sound_speed_transversal Transversal sound speed shell radius_shell Shell radius radius_fluid Fluid radius","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calculate_ka_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ka matrix for Goodman and Stern (1962) model — calculate_ka_matrix","text":"Matrix ka values","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calibration.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates theoretical TS of a solid sphere of a certain material at a given frequency. — calibration","title":"Calculates theoretical TS of a solid sphere of a certain material at a given frequency. — calibration","text":"function wrapper around TS_calculate(...) parametrizes remainder model, also simple calculations need looped. function provides TS estimate given frequency.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calibration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates theoretical TS of a solid sphere of a certain material at a given frequency. — calibration","text":"","code":"calibration(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/calibration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates theoretical TS of a solid sphere of a certain material at a given frequency. — calibration","text":"object CAL-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calibration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates theoretical TS of a solid sphere of a certain material at a given frequency. — calibration","text":"theoretical acoustic target strength (TS, dB re. 1 \\(m^2\\))  solid sphere given frequency.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calibration.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates theoretical TS of a solid sphere of a certain material at a given frequency. — calibration","text":"MacLennan D. N. (1981). theory solid spheres sonar calibration targets. Scottish Fisheries Research . 22, Department Agriculture Fisheries Scotland.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calibration_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize CAL-class object for modeling. — calibration_initialize","title":"Initialize CAL-class object for modeling. — calibration_initialize","text":"Initialize CAL-class object modeling.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/calibration_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize CAL-class object for modeling. — calibration_initialize","text":"","code":"calibration_initialize(   object,   frequency,   sound_speed_sw = 1500,   density_sw = 1026 )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/calibration_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize CAL-class object for modeling. — calibration_initialize","text":"object CAL-class object. frequency Frequency (Hz). sound_speed_sw Seawater sound speed. density_sw Seawater density.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cod.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample sardine shape with fully inflated swimbladder. — cod","title":"Sample sardine shape with fully inflated swimbladder. — cod","text":"Sample sardine shape fully inflated swimbladder.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample sardine shape with fully inflated swimbladder. — cod","text":"","code":"data(cod)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/cod.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample sardine shape with fully inflated swimbladder. — cod","text":"pre-generated SBF scatterer containing information required target strength modeling. metadata Relevant identifying metadata (list). model_parameters Container specified model parameters (list). model Model outputs results (list). body rpos: Position matrix (x, yw, zU, zL; m). sound_speed: Flesh sound speed (cbody, m s-1) density: Flesh density (ρbody, kg m3) theta: Body orientation relative transmitting transducer (θbody , rads) bladder rpos: Position matrix (x, yw, zU, zL; m). sound_speed: Flesh sound speed (cbladder, m s-1) density: Flesh density (ρbladder, kg m3) theta: Body orientation relative transmitting transducer (θbladder , rads) shape_parameters body length: Body length (m). ncyl: Number discrete cylinders along body length. theta_units: Units used orientation body. length_units: Units used body length. bladder length: Bladder length (m). ncyl: Number discrete cylinders along swimbladder length. theta_units: Units used orientation swimbladder. length_units: Units used swimbladder length.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/contour_integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Numerical integration via adaptive quadrature of complex values — contour_integrate","title":"Numerical integration via adaptive quadrature of complex values — contour_integrate","text":"Numerical integration via adaptive quadrature complex values","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/contour_integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerical integration via adaptive quadrature of complex values — contour_integrate","text":"","code":"contour_integrate(integral, x, y)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/contour_integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerical integration via adaptive quadrature of complex values — contour_integrate","text":"integral Input integration function indexed can used within base::apply. x Indexing argument multi-row objects y Indexing argument multi-column objects","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/create_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper function that automatically creates generalized and/or canonical shapes for TS modeling. — create_shape","title":"A wrapper function that automatically creates generalized and/or canonical shapes for TS modeling. — create_shape","text":"wrapper function automatically creates generalized /canonical shapes TS modeling.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/create_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper function that automatically creates generalized and/or canonical shapes for TS modeling. — create_shape","text":"","code":"create_shape(shape, ...)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/create_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper function that automatically creates generalized and/or canonical shapes for TS modeling. — create_shape","text":"shape Shape. Details shape specification provided 'Details', including mandatory arguments. ... Additional input arguments subsequent shape generation functions.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/create_shape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper function that automatically creates generalized and/or canonical shapes for TS modeling. — create_shape","text":"Chu, D., Foote, K.G., Stanton, T.K. 1993. analysis target strength measurements Antarctic krill 38 120 kHz: Comparison deformed cylinder model inference orientation distribution. Journal Acoustical Society America, 93(5): 2985-2988. https://doi.org/10.1121/1.405818 Smith, J.N., Ressler, P.H., Warren, J.D. 2013. distorted wave Born approximation target strength model Bering Sea euphausiids. ICES Journal Marine Science, 70(1): 204-214. https://doi.org/10.1093/icesjms/fss140","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/create_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A wrapper function that automatically creates generalized and/or canonical shapes for TS modeling. — create_shape","text":"shape argument specifies shape function generate desired shape TS modeling. Options currently include:","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/create_shape.html","id":"model-parameter-definitions","dir":"Reference","previous_headings":"","what":"Model Parameter Definitions","title":"A wrapper function that automatically creates generalized and/or canonical shapes for TS modeling. — create_shape","text":"length: x-axis length shape. radius: radius shape applicable. length_radius_ratio: length--radius ratio (L/), specifically refers radius mid-point cylinder maximum value. typical L/ratio literature 16 krill. taper: taper order (n), parameterizes tapering function reported Chu et al. (1993) create tapered cylinder. tapering order converge prolate oblate spheroid L > 2a L < 2a, respectively, n = 2. typical taper order literature 10. polynomial: vector arbitrary polynomial coefficients generate deformed cylinder reported Smith et al. (2013). Although listed mandatory argument polynomial cylinder function, default setting uses sixth-degree polynomial coefficients reported Smith et al. (2013).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cylinder.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a cylinder. — cylinder","title":"Creates a cylinder. — cylinder","text":"Creates cylinder.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cylinder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a cylinder. — cylinder","text":"","code":"cylinder(length_body, radius_body, length_radius_ratio,  taper, n_segments, length_units)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/cylinder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a cylinder. — cylinder","text":"length_body Length (m). radius_body Maximum/uniform radius (m). length_radius_ratio Optional ratio input radius explicitly known. taper Optional input degree taper round ends cylinder. n_segments Number segments discretize object shape. Defaults 1e2 segments. length_units Units (default meters, \"m\").","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/cylinder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a cylinder. — cylinder","text":"Creates position vector tapered untapered cylinder.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/dcm_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize object for modeling using the DCM. — dcm_initialize","title":"Initialize object for modeling using the DCM. — dcm_initialize","text":"Initialize object modeling using DCM.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/dcm_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize object for modeling using the DCM. — dcm_initialize","text":"","code":"dcm_initialize(   object,   frequency,   radius_cylinder = NULL,   radius_curvature = NULL,   radius_curvature_ratio = 3,   radius_cylinder_fun = \"max\",   length = NULL,   g = NULL,   h = NULL,   theta = NULL,   sound_speed_sw = 1500,   density_sw = 1026,   alpha_B = 0.8 )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/dcm_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize object for modeling using the DCM. — dcm_initialize","text":"object FLS-class object. frequency Transmit frequency (kHz) radius_cylinder Optional input override current shape radius. radius_curvature Numeric input radius curvature radius_curvature_ratio Ratio body length radius curvature. Defaults 3.0. radius_cylinder_fun Defines radius value used radius vector. Defaults \"max\", also accepts \"mean\" \"median\". length Body length (m). g Density contrast. h Sound speed contrast. theta Body orientation relative incident sound wave. sound_speed_sw Seawater sound speed (cbody, m s-1). density_sw Seawater density (ρbody, kg m3) alpha_B Numerical coefficient (αB).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/degrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert angular measurements from radians to degrees — degrees","title":"Convert angular measurements from radians to degrees — degrees","text":"Convert angular measurements radians degrees","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/degrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert angular measurements from radians to degrees — degrees","text":"","code":"degrees( x )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/degrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert angular measurements from radians to degrees — degrees","text":"x real value radians","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/degrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert angular measurements from radians to degrees — degrees","text":"Angle degrees","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/degrees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert angular measurements from radians to degrees — degrees","text":"","code":"orientation <- pi / 2 # radians degrees( orientation ) # this should return a value equal to 90 degrees #> [1] 90"},{"path":"https://brandynlucca.github.io/acousticTS/reference/discover_reforge_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get reforge parameters from known method signatures — discover_reforge_params","title":"Get reforge parameters from known method signatures — discover_reforge_params","text":"Get reforge parameters known method signatures","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/discover_reforge_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get reforge parameters from known method signatures — discover_reforge_params","text":"","code":"discover_reforge_params(object_class)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/discover_reforge_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get reforge parameters from known method signatures — discover_reforge_params","text":"object_class Character string object class","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/discover_reforge_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get reforge parameters from known method signatures — discover_reforge_params","text":"Character vector parameter names","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/dwba_curved_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize FLS-class object for TS modeling. — dwba_curved_initialize","title":"Initialize FLS-class object for TS modeling. — dwba_curved_initialize","text":"Initialize FLS-class object TS modeling.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/dwba_curved_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize FLS-class object for TS modeling. — dwba_curved_initialize","text":"","code":"dwba_curved_initialize(   object,   frequency,   sound_speed_sw = 1500,   density_sw = 1026,   radius_curvature_ratio = NULL,   theta = pi/2 )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/dwba_curved_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize FLS-class object for TS modeling. — dwba_curved_initialize","text":"object FLS-class object. frequency Frequency (Hz). sound_speed_sw Seawater sound speed. density_sw Seawater density. radius_curvature_ratio Radius curvature ratio (length--curvature ratio). theta Angle incident soundwave (pi / 2 broadside).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/dwba_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize FLS-class object for TS modeling. — dwba_initialize","title":"Initialize FLS-class object for TS modeling. — dwba_initialize","text":"Initialize FLS-class object TS modeling.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/dwba_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize FLS-class object for TS modeling. — dwba_initialize","text":"","code":"dwba_initialize(   object,   frequency,   sound_speed_sw = 1500,   density_sw = 1026,   theta = pi/2 )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/dwba_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize FLS-class object for TS modeling. — dwba_initialize","text":"object FLS-class object. frequency Frequency (Hz). sound_speed_sw Seawater sound speed. density_sw Seawater density. theta Angle incident soundwave (pi / 2 broadside).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ess_generate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate ESS shape — ess_generate","title":"Generate ESS shape — ess_generate","text":"Generate ESS shape","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ess_generate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate ESS shape — ess_generate","text":"","code":"ess_generate(   shape = \"sphere\",   x_body = NULL,   y_body = NULL,   z_body = NULL,   radius_shell,   shell_thickness = NULL,   g_fluid = NULL,   density_fluid = NULL,   h_fluid = NULL,   sound_speed_fluid = NULL,   g_shell = NULL,   density_shell = NULL,   h_shell = NULL,   sound_speed_shell = NULL,   E = NULL,   G = NULL,   K = NULL,   nu = NULL,   theta_shell = pi/2,   ID = NULL,   theta_units = \"radians\",   length_units = \"m\" )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/ess_generate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate ESS shape — ess_generate","text":"shape Optional input argument dictates shape-type, desired, generalized shapes. x_body Vector containing x-axis body (m) shape data. y_body Vector containing y-axis body (m) shape data. z_body Vector containing z-axis body (m) shape data. radius_shell Radius shell (m). shell_thickness Optional shell thickness (m). g_fluid Optional density contrast fluid-like body. density_fluid Optional density fluid-like body (kg/m³). h_fluid Optional sound speed contrast fluid-like body. sound_speed_fluid Optional sound speed fluid-like body (m/s). g_shell Density contrast shell. density_shell Optional density shell (kg/m³). h_shell Sound speed contrast shell. sound_speed_shell Optional sound speed shell (m/s). E Young's modulus (Pa) shell material. G Shear modulus (Pa) shell material. K Bulk modulus (Pa) shell material. nu Poisson's ratio (Dimensionless) shell material. theta_shell Object orientation relative incident sound wave. ID Optional metadata entry. theta_units Units used orientation. Defaults \"radians\". length_units Units used position vector. Defaults \"m\".","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ess_generate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate ESS shape — ess_generate","text":"ESS-class object","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ess_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting for ESS-class objects — ess_plot","title":"Plotting for ESS-class objects — ess_plot","text":"Plotting ESS-class objects","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ess_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting for ESS-class objects — ess_plot","text":"","code":"ess_plot(   object,   type = \"shape\",   nudge_y = 1.02,   nudge_x = 1.01,   x_units = \"frequency\",   y_units = \"TS\",   ... )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/ess_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting for ESS-class objects — ess_plot","text":"object ESS-class object. type Toggle body shape (\"shape\") modeling results (\"model\") nudge_y y-axis nudge. nudge_x x-axis nudge. x_units \"model\" selected, toggle frequency (\"frequency\", kHz) ka (\"ka\"). y_units y-axis data selection (e.g. TS, sigma_bs – defaults TS). ... Additional plot inputs","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ess_show.html","id":null,"dir":"Reference","previous_headings":"","what":"show(...) for ESS-class objects. — ess_show","title":"show(...) for ESS-class objects. — ess_show","text":"show(...) ESS-class objects.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ess_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show(...) for ESS-class objects. — ess_show","text":"","code":"ess_show(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/ess_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show(...) for ESS-class objects. — ess_show","text":"object ESS-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary accessor function for dredging specific data from scatterer objects — extract","title":"Primary accessor function for dredging specific data from scatterer objects — extract","text":"Primary accessor function dredging specific data scatterer objects","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary accessor function for dredging specific data from scatterer objects — extract","text":"","code":"extract(object, feature)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Primary accessor function for dredging specific data from scatterer objects — extract","text":"object Scatterer-class object. feature Feature interest (e.g. body).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/fls_generate.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually generate a FLS object. — fls_generate","title":"Manually generate a FLS object. — fls_generate","text":"Manually generate FLS object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/fls_generate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually generate a FLS object. — fls_generate","text":"","code":"fls_generate(   shape = \"arbitrary\",   x_body = NULL,   y_body = NULL,   z_body = NULL,   length_body = NULL,   radius_body = NULL,   radius_curvature_ratio = NULL,   n_segments = 18,   g_body,   h_body,   theta_body = pi/2,   ID = NULL,   length_units = \"m\",   theta_units = \"radians\",   ... )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/fls_generate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually generate a FLS object. — fls_generate","text":"shape Optional input argument dictates shape-type, desired, generalized shapes. x_body Vector containing x-axis body (m) shape data. y_body Vector containing y-axis body (m) shape data. z_body Vector containing z-axis body (m) shape data. length_body Optional input generic length value input. radius_body Vector containing radii (m). radius_curvature_ratio Length--curvature ratio (pc/L). n_segments Number body segments. g_body Density contrast. h_body Soundspeed contrast theta_body Orientation target relative transmit source (\\(\\theta\\)). Broadside incidence considered 90 degrees, pi/2. Default value pi/2; input radians. ID Optional metadata entry. length_units Units used position vector. Defaults \"m\". theta_units Units used orientation. Defaults \"radians\". ... Additional parameters.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/fls_generate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually generate a FLS object. — fls_generate","text":"FLS-class object","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/fls_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting for FLS-class objects — fls_plot","title":"Plotting for FLS-class objects — fls_plot","text":"Plotting FLS-class objects","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/fls_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting for FLS-class objects — fls_plot","text":"","code":"fls_plot(   object,   type = \"shape\",   nudge_y = 1.05,   nudge_x = 1.01,   aspect_ratio = \"manual\",   x_units = \"frequency\",   y_units = \"TS\",   ... )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/fls_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting for FLS-class objects — fls_plot","text":"object FLS-class object. type Toggle body shape (\"shape\") modeling results (\"model\") nudge_y y-axis nudge. nudge_x x-axis nudge. aspect_ratio Aspect ratio setting ( defaults \"manual\" nudge_y nudge_x apply; otherwise, input \"auto\"). x_units \"model\" selected, toggle frequency (\"frequency\", kHz) ka (\"ka\"). y_units y-axis data selection (e.g. TS, sigma_bs – defaults TS) ... Additional plot inputs","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/fls_show.html","id":null,"dir":"Reference","previous_headings":"","what":"show(...) for FLS-class objects. — fls_show","title":"show(...) for FLS-class objects. — fls_show","text":"show(...) FLS-class objects.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/fls_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show(...) for FLS-class objects. — fls_show","text":"","code":"fls_show(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/fls_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show(...) for FLS-class objects. — fls_show","text":"object FLS-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/gas_generate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create GAS object — gas_generate","title":"Create GAS object — gas_generate","text":"Create GAS object","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/gas_generate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create GAS object — gas_generate","text":"","code":"gas_generate(   shape = \"sphere\",   radius,   h_fluid = 0.22,   g_fluid = 0.0012,   sound_speed_fluid = NULL,   density_fluid = NULL,   theta_body = pi/2,   ID = NULL,   radius_units = \"m\",   theta_units = \"radians\",   n_segments = 100 )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/gas_generate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create GAS object — gas_generate","text":"shape Optional pre-made shape input. Default sphere. radius Optional average radius (m). h_fluid Sound speed contrast fluid relative surrounding medium (h). g_fluid Density contrast fluid relative surrounding density (g). sound_speed_fluid Optional fluid sound speed (m/s). density_fluid Optional fluid density (m/s). theta_body Orientation target relative transmit source (\\(\\theta\\)). Broadside incidence considered 90 degrees, pi/2. Default value pi/2; input radians. ID Optional metadata entry. radius_units Diameter units. Defaults \"m\". theta_units Units used orientation. Defaults \"radians\". n_segments Number body segments.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/gas_generate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create GAS object — gas_generate","text":"GAS-class object","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/gas_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting for GAS-class objects — gas_plot","title":"Plotting for GAS-class objects — gas_plot","text":"Plotting GAS-class objects","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/gas_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting for GAS-class objects — gas_plot","text":"","code":"gas_plot(   object,   type = \"shape\",   nudge_y = 1.01,   nudge_x = 1.01,   x_units = \"frequency\",   y_units = \"TS\",   ... )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/gas_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting for GAS-class objects — gas_plot","text":"object GAS-class object. type Toggle body shape (\"shape\") modeling results (\"model\") nudge_y y-axis nudge. nudge_x x-axis nudge. x_units \"model\" selected, toggle frequency (\"frequency\", kHz) ka (\"ka\"). y_units y-axis data selection (e.g. TS, sigma_bs – defaults TS). ... Additional plot inputs","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/gas_show.html","id":null,"dir":"Reference","previous_headings":"","what":"show(...) for GAS_class objects — gas_show","title":"show(...) for GAS_class objects — gas_show","text":"show(...) GAS_class objects","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/gas_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show(...) for GAS_class objects — gas_show","text":"","code":"gas_show(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/gas_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show(...) for GAS_class objects — gas_show","text":"object GAS-class object","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/get_TS.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a single simulation for a given parameter grid index — get_TS","title":"Run a single simulation for a given parameter grid index — get_TS","text":"helper function extracts parameter values given simulation grid index, updates working scatterer object accordingly (including reforge needed), runs target strength calculation, formats results output.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/get_TS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a single simulation for a given parameter grid index — get_TS","text":"","code":"get_TS(grid_index, object, parameters, simulation_grid, frequency, model)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/get_TS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a single simulation for a given parameter grid index — get_TS","text":"grid_index Integer index row simulation_grid simulate. object Scatterer-class object. parameters List containing values, distributions, generating functions parameter values inform TS model. frequency Frequency (Hz). model Model name. multiple models specified, output list data frames, one model.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/get_TS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a single simulation for a given parameter grid index — get_TS","text":"named list data frames, one per model, containing simulation results along model name parameter values simulation.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/get_TS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a single simulation for a given parameter grid index — get_TS","text":"function intended internal use parallel sequential simulation workflows. handles object re-forging, parameter assignment, result extraction single simulation instance.","code":""},{"path":[]},{"path":"https://brandynlucca.github.io/acousticTS/reference/hc.html","id":null,"dir":"Reference","previous_headings":"","what":"Cylindrical Bessel (Hankel) function of the third kind and its derivative — hc","title":"Cylindrical Bessel (Hankel) function of the third kind and its derivative — hc","text":"Cylindrical Bessel (Hankel) function third kind derivative","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/hc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cylindrical Bessel (Hankel) function of the third kind and its derivative — hc","text":"","code":"hc(l, n)  hcd(l, n)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/hc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cylindrical Bessel (Hankel) function of the third kind and its derivative — hc","text":"l integer fractional order n complex real argument","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/hc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cylindrical Bessel (Hankel) function of the third kind and its derivative — hc","text":"Calculates cylindrical Bessel function first kind (H_v) respective derivatives.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/hc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cylindrical Bessel (Hankel) function of the third kind and its derivative — hc","text":"Amos D.E., \"AMOS, Portable Package Bessel Functions Complex Argument Nonnegative Order\", http://netlib.org/amos","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/high_pass_stanton.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the theoretical TS of a shelled organism using the non-modal High Pass (HP) model — high_pass_stanton","title":"Calculates the theoretical TS of a shelled organism using the non-modal High Pass (HP) model — high_pass_stanton","text":"Calculates theoretical TS shelled organism using non-modal High Pass (HP) model","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/high_pass_stanton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the theoretical TS of a shelled organism using the non-modal High Pass (HP) model — high_pass_stanton","text":"","code":"high_pass_stanton(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/high_pass_stanton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the theoretical TS of a shelled organism using the non-modal High Pass (HP) model — high_pass_stanton","text":"object Desired animal object (Elastic Shelled).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/high_pass_stanton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the theoretical TS of a shelled organism using the non-modal High Pass (HP) model — high_pass_stanton","text":"Target strength (TS, dB re: 1 m^2)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/high_pass_stanton.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates the theoretical TS of a shelled organism using the non-modal High Pass (HP) model — high_pass_stanton","text":"Lavery, .C., Wiebe, P.H., Stanton, T.K., Lawson, G.L., Benfield, M.C., Copley, N. 2007. Determining dominant scatterers sound mixed zooplankton popuilations. Journal Acoustical Society America, 122(6): 3304-3326.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/high_pass_stanton_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize object for Stanton high-pass approximation — high_pass_stanton_initialize","title":"Initialize object for Stanton high-pass approximation — high_pass_stanton_initialize","text":"Initialize object Stanton high-pass approximation","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/high_pass_stanton_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize object for Stanton high-pass approximation — high_pass_stanton_initialize","text":"","code":"high_pass_stanton_initialize(   object,   frequency,   radius_shell,   g_shell,   h_shell,   sound_speed_sw = 1500,   density_sw = 1026 )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/high_pass_stanton_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize object for Stanton high-pass approximation — high_pass_stanton_initialize","text":"object ESS-class object. frequency Frequency (Hz). radius_shell Radius shell. g_shell Optional shell density contrast. h_shell Optional shell sound speed contrast. sound_speed_sw Seawater sound speed. density_sw Seawater density.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/hs.html","id":null,"dir":"Reference","previous_headings":"","what":"Spherical Bessel function of the third kind and its respective derivative — hs","title":"Spherical Bessel function of the third kind and its respective derivative — hs","text":"Spherical Bessel function third kind respective derivative","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/hs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spherical Bessel function of the third kind and its respective derivative — hs","text":"","code":"hs(l, n)  hsd(l, n)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/hs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spherical Bessel function of the third kind and its respective derivative — hs","text":"l integer fractional order n complex real argument","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/hs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spherical Bessel function of the third kind and its respective derivative — hs","text":"Calculates spherical Bessel function third kind (hs) first (hsd) derivative.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/hs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spherical Bessel function of the third kind and its respective derivative — hs","text":"Amos D.E., \"AMOS, Portable Package Bessel Functions Complex Argument Nonnegative Order\", http://netlib.org/amos","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/jc.html","id":null,"dir":"Reference","previous_headings":"","what":"Cylindrical Bessel function of the first kind and its respective derivatives — jc","title":"Cylindrical Bessel function of the first kind and its respective derivatives — jc","text":"Calculate cylindrical Bessel function first kind (jc) first (jcd) second (jcdd) derivatives.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/jc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cylindrical Bessel function of the first kind and its respective derivatives — jc","text":"","code":"jc(l, n)  jcd(l, n)  jcdd(l, n)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/jc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cylindrical Bessel function of the first kind and its respective derivatives — jc","text":"l integer fractional order n complex real argument","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/jc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cylindrical Bessel function of the first kind and its respective derivatives — jc","text":"Calculates cylindrical Bessel function first kind (J_v) respective derivatives.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/jc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cylindrical Bessel function of the first kind and its respective derivatives — jc","text":"Amos D.E., \"AMOS, Portable Package Bessel Functions Complex Argument Nonnegative Order\", http://netlib.org/amos","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/js.html","id":null,"dir":"Reference","previous_headings":"","what":"Spherical Bessel function of the first kind and its respective derivatives — js","title":"Spherical Bessel function of the first kind and its respective derivatives — js","text":"Spherical Bessel function first kind respective derivatives","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spherical Bessel function of the first kind and its respective derivatives — js","text":"","code":"js(l, n)  jsd(l, n)  jsdd(l, n)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spherical Bessel function of the first kind and its respective derivatives — js","text":"l integer fractional order n complex real argument","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spherical Bessel function of the first kind and its respective derivatives — js","text":"Calculates spherical Bessel function first kind (js) first (jsd) second (jsdd) derivatives.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/js.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spherical Bessel function of the first kind and its respective derivatives — js","text":"Amos D.E., \"AMOS, Portable Package Bessel Functions Complex Argument Nonnegative Order\", http://netlib.org/amos","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/k.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the acoustic wavenumber (k) based on the sound speed of water. — k","title":"Calculate the acoustic wavenumber (k) based on the sound speed of water. — k","text":"Calculate acoustic wavenumber (k) based sound speed water.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the acoustic wavenumber (k) based on the sound speed of water. — k","text":"","code":"k(frequency, sound_speed)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the acoustic wavenumber (k) based on the sound speed of water. — k","text":"frequency Frequency (f, Hz) sound_speed Sound speed (c, m/s)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the acoustic wavenumber (k) based on the sound speed of water. — k","text":"Calculates acoustic wavenumber (k) based sound speed water.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/kappa.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the compressibility material properties of a scatterer's tissue or shell (kappa) — kappa","title":"Calculate the compressibility material properties of a scatterer's tissue or shell (kappa) — kappa","text":"Calculate compressibility material properties scatterer's tissue shell (kappa)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/kappa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the compressibility material properties of a scatterer's tissue or shell (kappa) — kappa","text":"","code":"kappa(interface1, interface2)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/kappa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the compressibility material properties of a scatterer's tissue or shell (kappa) — kappa","text":"interface1 Dataframe object containing density (kg/m^3) sound speed (m/s) values boundary/interface (1) interface2 Dataframe object containing density (kg/m^3) sound speed (m/s) values boundary/interface (2)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/krill.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample krill (Euphausia superba) shape taken from McGehee et al. (1998) — krill","title":"Sample krill (Euphausia superba) shape taken from McGehee et al. (1998) — krill","text":"dataset containing sample krill (Euphausia superba) body shape proposed McGehee et al. (1998).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/krill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample krill (Euphausia superba) shape taken from McGehee et al. (1998) — krill","text":"","code":"data(krill)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/krill.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample krill (Euphausia superba) shape taken from McGehee et al. (1998) — krill","text":"pre-generated FLS scatterer containing information required target strength modeling. metadata Relevant identifying metadata (list). model_parameters Container specified model parameters (list). model Model outputs results (list). body rpos: Position matrix (x, y, z; m). radius: Radius discrete cylinder along position matrix (m). g: Body density contrast relative surrounding medium. h: Sound speed contrast relative surrounding medium. theta: Body orientation relative transmitting transducer (θbody , rads) shape_parameters body length: Body length (m). ncyl: Number discrete cylinders along body length. theta_units: Units used orientation body. length_units: Units used body length.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/krm_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize SBF-class object for KRM calculations. — krm_initialize","title":"Initialize SBF-class object for KRM calculations. — krm_initialize","text":"Initialize SBF-class object KRM calculations.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/krm_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize SBF-class object for KRM calculations. — krm_initialize","text":"","code":"krm_initialize(   object,   frequency,   sound_speed_sw = 1500,   density_sw = 1026,   density_body = NULL,   density_swimbladder = NULL,   sound_speed_body = NULL,   sound_speed_swimbladder = NULL,   theta_body = NULL,   theta_swimbladder = NULL )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/krm_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize SBF-class object for KRM calculations. — krm_initialize","text":"object SBF-class object frequency Frequency (Hz). sound_speed_sw Seawater sound speed. density_sw Seawater density. density_body Optional flesh density input. density_swimbladder Optional gas density input. sound_speed_body Optional flesh sound speed input. sound_speed_swimbladder Optional gas sound speed input. theta_body Optional orientation input (relative incident sound wave). theta_swimbladder Optional orientation input (relative incident sound wave).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/lame.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Lamé's first parameter (\\(\\lambda\\)). — lame","title":"Calculate Lamé's first parameter (\\(\\lambda\\)). — lame","text":"Calculate Lamé's first parameter (\\(\\lambda\\)) two four elastic moduli. two values input, function default using bulk (K) Young's (E) moduli. assumes input values represent 3D material properties.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/lame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Lamé's first parameter (\\(\\lambda\\)). — lame","text":"","code":"lame(K, E, G, nu)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/lame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Lamé's first parameter (\\(\\lambda\\)). — lame","text":"K Bulk modulus (Pa). E Young's modulus (Pa). G Shear modulus (Pa). nu Poisson's ratio (Dimensionless).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/lame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Lamé's first parameter (\\(\\lambda\\)). — lame","text":"Returns Lamé's first parameter (\\(\\lambda\\)).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert backscatter values from log- to linear-domain. — linear","title":"Convert backscatter values from log- to linear-domain. — linear","text":"linear(...) function converts given value linear domain, db(...) function converts inputs log domain.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert backscatter values from log- to linear-domain. — linear","text":"","code":"linear(value, coefficient = 10)  db(value, coefficient = 10)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert backscatter values from log- to linear-domain. — linear","text":"value Logarithmic (e.g. TS) linear (\\(\\sigma_bs\\)) value coefficient Optional. Numeric coefficient preceding logarithm. Default 10.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert backscatter values from log- to linear-domain. — linear","text":"Transforms backscattering response either log (db) linear (linear) domains.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/modal_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Format data for the modal series solution model into the appropriate matrix — modal_matrix","title":"Format data for the modal series solution model into the appropriate matrix — modal_matrix","text":"Format data modal series solution model appropriate matrix","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/modal_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format data for the modal series solution model into the appropriate matrix — modal_matrix","text":"","code":"modal_matrix(v, limit)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/modal_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format data for the modal series solution model into the appropriate matrix — modal_matrix","text":"v Vector input. limit Modal series limit.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/model_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Base plotting color palette — model_palette","title":"Base plotting color palette — model_palette","text":"Color palette vector referenced plotting multiple models simultaneously.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/model_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base plotting color palette — model_palette","text":"","code":"model_palette"},{"path":"https://brandynlucca.github.io/acousticTS/reference/model_palette.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Base plotting color palette — model_palette","text":"object class character length 9.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/model_registry.html","id":null,"dir":"Reference","previous_headings":"","what":"Model registry: maps model names to their functions — model_registry","title":"Model registry: maps model names to their functions — model_registry","text":"Model registry: maps model names functions","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/model_registry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model registry: maps model names to their functions — model_registry","text":"","code":"model_registry"},{"path":"https://brandynlucca.github.io/acousticTS/reference/model_registry.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model registry: maps model names to their functions — model_registry","text":"object class list length 10.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/mss_anderson_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize GAS-object for modal series solution. — mss_anderson_initialize","title":"Initialize GAS-object for modal series solution. — mss_anderson_initialize","text":"Initialize GAS-object modal series solution.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/mss_anderson_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize GAS-object for modal series solution. — mss_anderson_initialize","text":"","code":"mss_anderson_initialize(   object,   frequency,   radius = NULL,   g_body = NULL,   h_body = NULL,   sound_speed_sw = 1500,   density_sw = 1026,   ka_limit = NULL )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/mss_anderson_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize GAS-object for modal series solution. — mss_anderson_initialize","text":"object GAS-class object. frequency Frequency (Hz). radius Radius sphere (m). g_body Density contrast gas. h_body Sound speed contrast gas. sound_speed_sw Seawater sound speed. density_sw Seawater density. ka_limit Modal series limit (.e. max \"m\"). default maximum ka + 10.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/mss_goodman_stern_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize ESS-object for modal series solution. — mss_goodman_stern_initialize","title":"Initialize ESS-object for modal series solution. — mss_goodman_stern_initialize","text":"Initialize ESS-object modal series solution.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/mss_goodman_stern_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize ESS-object for modal series solution. — mss_goodman_stern_initialize","text":"","code":"mss_goodman_stern_initialize(   object,   frequency,   sound_speed_sw = 1500,   density_sw = 1026,   m_limit = NULL )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/mss_goodman_stern_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize ESS-object for modal series solution. — mss_goodman_stern_initialize","text":"object ESS-class object. frequency Frequency vector (Hz). sound_speed_sw Seawater sound speed (m/s). Default: 1500. density_sw Seawater density (kg/m³). Default: 1026. m_limit Modal series limit (.e. max \"m\"). default maximum ka + 10.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/phase_integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function incorporating phase deviation into contour integration — phase_integrate","title":"Wrapper function incorporating phase deviation into contour integration — phase_integrate","text":"Wrapper function incorporating phase deviation contour integration","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/phase_integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function incorporating phase deviation into contour integration — phase_integrate","text":"","code":"phase_integrate(x, y, n_iterations, integral, phase_sd)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/phase_integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function incorporating phase deviation into contour integration — phase_integrate","text":"x Indexing argument multi-row objects y Indexing argument multi-column objects n_iterations Number phase deviations average summarize integral Integral function used numerical integration via adaptive quadrature phase_sd Phase standard deviation","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/plot.scatterer.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for what is printed for objects. — plot","title":"Method for what is printed for objects. — plot","text":"Method printed objects.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/plot.scatterer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for what is printed for objects. — plot","text":"","code":"plot(x, y, ...)  # S4 method for class 'scatterer,missing' plot(   x,   y,   type = \"shape\",   nudge_y = 1.1,   nudge_x = 1.05,   aspect_ratio = \"manual\",   x_units = \"frequency\",   y_units = \"TS\",   ... )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/plot.scatterer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for what is printed for objects. — plot","text":"x Scatterer-class object. y Ignored (required plot method signature). ... Additional plot inputs type Toggle body shape (\"shape\") modeling results (\"model\") nudge_y y-axis nudge. nudge_x x-axis nudge. aspect_ratio Aspect ratio setting ( defaults \"manual\" nudge_y nudge_x apply; otherwise, input \"auto\"). x_units \"model\" selected, toggle frequency (\"frequency\", kHz) ka (\"ka\"). y_units y-axis data selection (e.g. TS, sigma_bs – defaults TS)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Poisson's ratio (\\(\\nu\\)). — pois","title":"Calculate the Poisson's ratio (\\(\\nu\\)). — pois","text":"Calculate Poisson's ratio (\\(\\nu\\)) two three elastic moduli calculate Lamé's parameter. two values input, function default using bulk (K) Young's (E) moduli. assumes input values represent 3D material properties.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Poisson's ratio (\\(\\nu\\)). — pois","text":"","code":"pois(K = NULL, E = NULL, G = NULL)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Poisson's ratio (\\(\\nu\\)). — pois","text":"K Bulk modulus (K, Pa). E Young's modulus (E, Pa). G Shear modulus (Pa).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Poisson's ratio (\\(\\nu\\)). — pois","text":"Returns dimensionless ratio known Poisson's ratio (\\(\\nu\\)).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/polynomial_cylinder.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a polynomial deformed cylinder. — polynomial_cylinder","title":"Creates a polynomial deformed cylinder. — polynomial_cylinder","text":"Creates polynomial deformed cylinder.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/polynomial_cylinder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a polynomial deformed cylinder. — polynomial_cylinder","text":"","code":"polynomial_cylinder(length_body, radius_body, n_segments, polynomial)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/polynomial_cylinder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a polynomial deformed cylinder. — polynomial_cylinder","text":"length_body Length (m). radius_body Maximum/uniform radius (m). n_segments Number segments discretize object shape. Defaults 1e2 segments. polynomial Polynomial coefficient vector.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/polynomial_cylinder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a polynomial deformed cylinder. — polynomial_cylinder","text":"Creates position vector polynomial deformed cylinder.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/polynomial_cylinder.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Creates a polynomial deformed cylinder. — polynomial_cylinder","text":"Smith, J.N., Ressler, P.H., Warren, J.D. 2013. distorted wave Born approximation target strength model Bering Sea euphausiids. ICES Journal Marine Science, 70(1): 204-214. https://doi.org/10.1093/icesjms/fss140","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/polynomial_cylinder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a polynomial deformed cylinder. — polynomial_cylinder","text":"","code":"if (FALSE) { # \\dontrun{ # We can use the polynomial coefficients defined in Smith et al. (2013) to # define the position vector of a sub-Arctic krill. poly_vec <- c(0.83, 0.36, -2.10, -1.20, 0.63, 0.82, 0.64) # Create the position vector # This outputs a list containing \"rpos\" and \"radius\" pos <- polynomial_cylinder(length_body = 15e-3, radius_body = 2e-3, polynomial = poly_vec) str(pos) } # }"},{"path":"https://brandynlucca.github.io/acousticTS/reference/prolate_spheroid.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a prolate spheroid. — prolate_spheroid","title":"Creates a prolate spheroid. — prolate_spheroid","text":"Creates prolate spheroid.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/prolate_spheroid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a prolate spheroid. — prolate_spheroid","text":"","code":"prolate_spheroid(   length_body,   radius_body,   length_radius_ratio = NULL,   n_segments = 18,   length_units = \"m\",   theta_units = \"radians\" )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/prolate_spheroid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a prolate spheroid. — prolate_spheroid","text":"length_body Semi-major axis length (m). radius_body Semi-minor axis length (m). can also stylized \"maximum radius\" scattering object. length_radius_ratio Optional ratio input radius explicitly known. n_segments Number segments discretize object shape. Defaults 18 segments. length_units Units body matrix (defaults m). theta_units Units body orientation (defaults radians).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/prolate_spheroid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a prolate spheroid. — prolate_spheroid","text":"Creates position vector prolate spheroid object defined semi-major -minor axes.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/radians.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert angular measurements from degrees to radians. — radians","title":"Convert angular measurements from degrees to radians. — radians","text":"Convert angular measurements degrees radians.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/radians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert angular measurements from degrees to radians. — radians","text":"","code":"radians( x )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/radians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert angular measurements from degrees to radians. — radians","text":"x real value degrees","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/radians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert angular measurements from degrees to radians. — radians","text":"Angle radians.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/radians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert angular measurements from degrees to radians. — radians","text":"","code":"orientation <- 90 # degrees radians( orientation ) # this should return a value equal to pi / 2 radians#'  #> [1] 1.570796"},{"path":"https://brandynlucca.github.io/acousticTS/reference/reflection_coefficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Plane wave/plane interface reflection coefficient — reflection_coefficient","title":"Plane wave/plane interface reflection coefficient — reflection_coefficient","text":"Plane wave/plane interface reflection coefficient","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/reflection_coefficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plane wave/plane interface reflection coefficient — reflection_coefficient","text":"","code":"reflection_coefficient(interface1, interface2, mode = \"DWBA\")"},{"path":"https://brandynlucca.github.io/acousticTS/reference/reflection_coefficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plane wave/plane interface reflection coefficient — reflection_coefficient","text":"interface1 Dataframe object containing density (kg/m^3) sound speed (m/s) values boundary/interface (1) interface2 Dataframe object containing density (kg/m^3) sound speed (m/s) values boundary/interface (2) mode Two options: coefficient calculation \"DWBA\" \"KRM\"","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/reforge-FLS-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Reforge FLS-class object. — reforge,FLS-method","title":"Reforge FLS-class object. — reforge,FLS-method","text":"Reforge FLS-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/reforge-FLS-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reforge FLS-class object. — reforge,FLS-method","text":"","code":"# S4 method for class 'FLS' reforge(object, length, radius, length_radius_ratio_constant = T, n_segments)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/reforge-FLS-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reforge FLS-class object. — reforge,FLS-method","text":"object FLS-class object. length New body length resize. radius New radius size length_radius_ratio_constant Keep length--radius ratio based new length n_segments New number segments","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/reforge-SBF-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Resizing function for swimbladdered targets — reforge,SBF-method","title":"Resizing function for swimbladdered targets — reforge,SBF-method","text":"Resizing function swimbladdered targets","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/reforge-SBF-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resizing function for swimbladdered targets — reforge,SBF-method","text":"","code":"# S4 method for class 'SBF' reforge(   object,   length_body = NA,   width_body = NA,   height_body = NA,   length_bladder = NA,   width_bladder = NA,   height_bladder = NA,   radius_body = NA,   bladder_inflation_factor = 1,   isometric_body = T,   isometric_bladder = T,   n_segments_body = NA,   n_segments_bladder = NA )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/reforge-SBF-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resizing function for swimbladdered targets — reforge,SBF-method","text":"object SBF-class object. length_body Updated body length applicable. width_body Updated body width applicable. height_body Updated body height/depth applicable. length_bladder Updated bladder length applicable. width_bladder Updated bladder width applicable. height_bladder Updated bladder height/depth applicable. radius_body Updated body radius applicable. bladder_inflation_factor Proportional bladder volume. isometric_body Logical; maintain isometric scaling body. isometric_bladder Logical; maintain isometric scaling bladder. n_segments_body Number segments along body. n_segments_bladder Number segments along bladder.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/reforge.html","id":null,"dir":"Reference","previous_headings":"","what":"Resize or reparameterize a scatterer object — reforge","title":"Resize or reparameterize a scatterer object — reforge","text":"Generic function resize reparameterize scatterer object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/reforge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resize or reparameterize a scatterer object — reforge","text":"","code":"reforge(object, ...)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/reforge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resize or reparameterize a scatterer object — reforge","text":"object scatterer object. ... Additional arguments passed specific methods.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/rho.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mass density material properties of a scatterer's tissue or shell (kappa) — rho","title":"Calculate the mass density material properties of a scatterer's tissue or shell (kappa) — rho","text":"Calculate mass density material properties scatterer's tissue shell (kappa)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/rho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mass density material properties of a scatterer's tissue or shell (kappa) — rho","text":"","code":"rho(interface1, interface2)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/rho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mass density material properties of a scatterer's tissue or shell (kappa) — rho","text":"interface1 Dataframe object containing density (kg/m^3) sound speed (m/s) values boundary/interface (1) interface2 Dataframe object containing density (kg/m^3) sound speed (m/s) values boundary/interface (2)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sardine.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample sardine shape with fully inflated swimbladder. — sardine","title":"Sample sardine shape with fully inflated swimbladder. — sardine","text":"Sample sardine shape fully inflated swimbladder.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sardine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample sardine shape with fully inflated swimbladder. — sardine","text":"","code":"data(sardine)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/sardine.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample sardine shape with fully inflated swimbladder. — sardine","text":"pre-generated SBF scatterer containing information required target strength modeling. metadata Relevant identifying metadata (list). model_parameters Container specified model parameters (list). model Model outputs results (list). body rpos: Position matrix (x, yw, zU, zL; m). sound_speed: Flesh sound speed (cbody, m s-1) density: Flesh density (ρbody, kg m3) theta: Body orientation relative transmitting transducer (θbody , rads) bladder rpos: Position matrix (x, yw, zU, zL; m). sound_speed: Flesh sound speed (cbladder, m s-1) density: Flesh density (ρbladder, kg m3) theta: Body orientation relative transmitting transducer (θbladder , rads) shape_parameters body length: Body length (m). ncyl: Number discrete cylinders along body length. theta_units: Units used orientation body. length_units: Units used body length. bladder length: Bladder length (m). ncyl: Number discrete cylinders along swimbladder length. theta_units: Units used orientation swimbladder. length_units: Units used swimbladder length.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sbf_generate.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually generate a SBF-class object. — sbf_generate","title":"Manually generate a SBF-class object. — sbf_generate","text":"Manually generate SBF-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sbf_generate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually generate a SBF-class object. — sbf_generate","text":"","code":"sbf_generate(   x_body,   w_body,   zU_body,   zL_body,   x_bladder,   w_bladder,   zU_bladder,   zL_bladder,   sound_speed_body,   sound_speed_bladder,   density_body,   density_bladder,   theta_body = pi/2,   theta_bladder = pi/2,   theta_units = \"radians\",   length_units = \"m\",   ID = NULL )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/sbf_generate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually generate a SBF-class object. — sbf_generate","text":"x_body Vector containing along-body axis (m). w_body Vector containing across-body axis (m). zU_body Vector containing dorsal-body axis (m). zL_body Vector containing ventral-body axis (m). x_bladder Vector containing along-bladder axis (m). w_bladder Vector containing across-bladder axis (m). zU_bladder Vector containing dorsal-bladder axis (m). zL_bladder Vector containing ventral-bladder axis (m). sound_speed_body Flesh sound speed (c;body, m s-1). sound_speed_bladder Bladder sound speed (c, m \\(s^-1\\). density_body Flesh density (ρbody, kg m3). density_bladder Bladder density (\\(\\rho\\), kg m3). theta_body Angle body relative wavefront (\\(\\theta_body\\), radians). theta_bladder Angle body relative wavefront (\\(\\theta_bladder\\), radians). theta_units Angular units. length_units Angular units. ID Angular units.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sbf_generate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually generate a SBF-class object. — sbf_generate","text":"Generates SBF-class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sbf_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting for SBF-class objects — sbf_plot","title":"Plotting for SBF-class objects — sbf_plot","text":"Plotting SBF-class objects","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sbf_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting for SBF-class objects — sbf_plot","text":"","code":"sbf_plot(   object,   type = \"shape\",   nudge_y = 1.05,   nudge_x = 1.01,   x_units = \"frequency\" )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/sbf_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting for SBF-class objects — sbf_plot","text":"object SBF-class object. type Toggle body shape (\"shape\") modeling results (\"model\") nudge_y y-axis nudge. nudge_x x-axis nudge. x_units \"model\" selected, toggle frequency (\"frequency\", kHz) ka (\"ka\").","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sbf_show.html","id":null,"dir":"Reference","previous_headings":"","what":"show(...) for SBF-class objects. — sbf_show","title":"show(...) for SBF-class objects. — sbf_show","text":"show(...) SBF-class objects.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sbf_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show(...) for SBF-class objects. — sbf_show","text":"","code":"sbf_show(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/sbf_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"show(...) for SBF-class objects. — sbf_show","text":"object SBF_class object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/scatterer-class.html","id":null,"dir":"Reference","previous_headings":"","what":"scatterer-class — scatterer-class","title":"scatterer-class — scatterer-class","text":"\\(acousticTS\\) package uses variety defined S4-class objects comprising different types scatterers, fish gas-filled swimbladders (SBF) fluid-like crustaceans (FLS).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/scatterer-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"scatterer-class — scatterer-class","text":"metadata List containing relevant metadata model_parameters Model parameters necessary predicting TS (placeholder)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/scatterer-class.html","id":"data-organization","dir":"Reference","previous_headings":"","what":"Data Organization","title":"scatterer-class — scatterer-class","text":"metadata: list comprising identifying information associated scatterer. default metadata entry includes ID uses default character value \"UID\" (.e. ID = \"UID\"). can otherwise formatted manner book keeping purposes. body/bladder: list includes information relevant scatterer's position vector, material properties, tilt/orientation, etc. scatterers, may include body, targets may additional parameter bladder. Generally, entry includes: rpos: relevant position vector (r0) includes axes x, y, z, etc., depend type scatterer used. radius: cases includes radius measurements cylinders depending type scatterer object. theta: orientation scatterer relative transmitting transducer sound source (θanimal) can represented either degrees radians, although functions require radians. g, h: material properties represent density sound speed contrasts (g h, respectively) relative ambient/surrounding fluid. targets may instead standard sound speed (canimal, m s-1) density (ρanimal, kg m3). shape_parameters: list includes metadata pertaining shape scatterer features interest (e.g. gas-filled swimbladder). Generally, entry includes: overall body length, number discrete cylinders make shape (applicable), units related θanimal (e.g. rad, °) length (e.g. mm, m). model_parameters: list contains relevant model parameterization object initialized modeling σbs. typically broken three categories: parameters: list includes information frequency (Hz), acoustic wavenumber (.e. k), etc. medium: data.frame including information material properties ambient medium. scatterer: list containing summarized information used parameterize certain scattering models. model: list collects model results one models linear domain (.e. σbs).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/scatterer-class.html","id":"supported-scatterers","dir":"Reference","previous_headings":"","what":"Supported Scatterers","title":"scatterer-class — scatterer-class","text":"Calibration spheres (CAL) CAL Fluid-like scatterers (FLS) FLS Swimbladdered fish (SBF) SBF Elastic shell scatterers (ESS) ESS","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sdwba_curved_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize FLS-class object for SDWBA modeling — sdwba_curved_initialize","title":"Initialize FLS-class object for SDWBA modeling — sdwba_curved_initialize","text":"Initialize FLS-class object SDWBA modeling","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sdwba_curved_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize FLS-class object for SDWBA modeling — sdwba_curved_initialize","text":"","code":"sdwba_curved_initialize(   object,   frequency,   sound_speed_sw = 1500,   density_sw = 1026,   n_iterations = 100,   n_segments_init = 14,   phase_sd_init = sqrt(2)/2,   length_init = 0.03835,   frequency_init = 120000 )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/sdwba_curved_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize FLS-class object for SDWBA modeling — sdwba_curved_initialize","text":"object FLS-class object. frequency Frequency (Hz). sound_speed_sw Seawater sound speed. density_sw Seawater density. n_iterations Number iterations repeat SDWBA n_segments_init Reference number body segments phase_sd_init Reference phase deviation length_init Reference body length frequency_init Reference frequency","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sdwba_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize FLS-class object for SDWBA modeling — sdwba_initialize","title":"Initialize FLS-class object for SDWBA modeling — sdwba_initialize","text":"Initialize FLS-class object SDWBA modeling","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sdwba_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize FLS-class object for SDWBA modeling — sdwba_initialize","text":"","code":"sdwba_initialize(   object,   frequency,   sound_speed_sw = 1500,   density_sw = 1026,   n_iterations = 100,   n_segments_init = 14,   phase_sd_init = sqrt(2)/2,   length_init = 0.03835,   frequency_init = 120000 )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/sdwba_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize FLS-class object for SDWBA modeling — sdwba_initialize","text":"object FLS-class object. frequency Frequency (Hz). sound_speed_sw Seawater sound speed. density_sw Seawater density. n_iterations Number iterations repeat SDWBA n_segments_init Reference number body segments phase_sd_init Reference phase deviation length_init Reference body length frequency_init Reference frequency","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sdwba_resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample shape for SDWBA model with piecewise constant radius — sdwba_resample","title":"Resample shape for SDWBA model with piecewise constant radius — sdwba_resample","text":"function resamples shape fluid-like scatterer (FLS) object use stochastic distorted wave Born approximation (SDWBA) calculations. resampling preserves overall shape scatterer creating new representation specified number segments. radius assignment uses stepwise algorithm maintain piecewise constant radius values across segments.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sdwba_resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample shape for SDWBA model with piecewise constant radius — sdwba_resample","text":"","code":"sdwba_resample(object, n_segments)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/sdwba_resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample shape for SDWBA model with piecewise constant radius — sdwba_resample","text":"object FLS-class object resample n_segments Number segments resampled shape","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sdwba_resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample shape for SDWBA model with piecewise constant radius — sdwba_resample","text":"FLS object resampled shape","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/segmentize.html","id":null,"dir":"Reference","previous_headings":"","what":"Discretize vector into separate intervals of different length — segmentize","title":"Discretize vector into separate intervals of different length — segmentize","text":"Discretize vector separate intervals different length","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/segmentize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discretize vector into separate intervals of different length — segmentize","text":"","code":"segmentize(x1, x0)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/segmentize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discretize vector into separate intervals of different length — segmentize","text":"x1 Desired vector/interval x0 Original initial vector/interval","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic scattering shape object used throughout this package. — shape-class","title":"Generic scattering shape object used throughout this package. — shape-class","text":"S4 class provides slots contain relevant shape data metadata variety arbitrary canonical shapes geoemtries. See scatterer-class detailed description S4 object interacts generic scatterer-class objects.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/shear.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the shear modulus (G). — shear","title":"Calculate the shear modulus (G). — shear","text":"Calculate shear modulus (G) two three elastic moduli calculate Lamé's parameter. two values input, function default using bulk (K) Young's (E) moduli. assumes input values represent 3D material properties.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/shear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the shear modulus (G). — shear","text":"","code":"shear(K = NULL, E = NULL, nu = NULL)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/shear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the shear modulus (G). — shear","text":"K Bulk modulus (Pa). E Young's modulus (Pa). nu Poisson's ratio (Dimensionless).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/shear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the shear modulus (G). — shear","text":"Returns estimate shear modulus (G).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/show-scatterer-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function for show(...) for different scatterers. — show,scatterer-method","title":"Generic function for show(...) for different scatterers. — show,scatterer-method","text":"Generic function show(...) different scatterers.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/show-scatterer-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function for show(...) for different scatterers. — show,scatterer-method","text":"","code":"# S4 method for class 'scatterer' show(object)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/show-scatterer-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function for show(...) for different scatterers. — show,scatterer-method","text":"object Scattering object.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sigma_bs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the linear backscattering coefficient (sigma_bs) from the linear scattering length, f_bs. — sigma_bs","title":"Calculates the linear backscattering coefficient (sigma_bs) from the linear scattering length, f_bs. — sigma_bs","text":"Calculates linear backscattering coefficient (sigma_bs) linear scattering length, f_bs.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sigma_bs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the linear backscattering coefficient (sigma_bs) from the linear scattering length, f_bs. — sigma_bs","text":"","code":"sigma_bs(f_bs)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/sigma_bs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the linear backscattering coefficient (sigma_bs) from the linear scattering length, f_bs. — sigma_bs","text":"f_bs Linear scattering length (m), related expression","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sigma_bs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the linear backscattering coefficient (sigma_bs) from the linear scattering length, f_bs. — sigma_bs","text":"Returns linear backscattering coefficient can converted TS.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/simulate_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate target strength (TS) with flexible parameterization and batching — simulate_ts","title":"Simulate target strength (TS) with flexible parameterization and batching — simulate_ts","text":"Simulate target strength (TS) flexible parameterization batching","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/simulate_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate target strength (TS) with flexible parameterization and batching — simulate_ts","text":"","code":"simulate_ts(   object,   frequency,   model,   n_realizations,   parameters,   batch_by = NULL,   parallel = TRUE,   n_cores = parallel::detectCores() - 1,   verbose = TRUE )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/simulate_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate target strength (TS) with flexible parameterization and batching — simulate_ts","text":"object Scatterer-class object. frequency Frequency (Hz). model Model name. multiple models specified, output list data frames, one model. n_realizations Number realizations output TS values. parameters List containing values, distributions, generating functions parameter values inform TS model. batch_by Optional. Specifies parameters parameters batch . Simulations run combinations parameter values. Default NULL. parallel Logical; whether parallelize simulations. Default TRUE. n_cores Optional. Number CPU cores use parallelization. Default parallel::detectCores() - 1. verbose Logical; whether print progress status messages console. Default TRUE.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/simulate_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate target strength (TS) with flexible parameterization and batching — simulate_ts","text":"data frame (list data frames) simulation results.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/simulate_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate target strength (TS) with flexible parameterization and batching — simulate_ts","text":"example, batch_by = \"length\" parameters[\"length\"] vector values, simulations run value length n_realizations times. multiple parameters specified batch_by, batching occur combinations values.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/simulate_ts.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Simulate target strength (TS) with flexible parameterization and batching — simulate_ts","text":"function uses pbapply::pblapply() parallelized simulation progress bars. Windows, parallelization uses PSOCK clusters, require necessary objects packages exported worker processes. Unix-like systems, forking used, generally simpler.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/simulate_ts.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Simulate target strength (TS) with flexible parameterization and batching — simulate_ts","text":"WARNING: Including many parameters parameters within batch_by may cause significant performance issues cause R crash. intensive simulations required, consider breaking manageable chunks","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a sphere. — sphere","title":"Creates a sphere. — sphere","text":"Creates sphere.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a sphere. — sphere","text":"","code":"sphere(radius, n_segments, diameter_units )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/sphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a sphere. — sphere","text":"radius Object radius (m). n_segments Number segments discretize object shape. Defaults 1e2 segments. diameter_units Default \"m\" meters","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/sphere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a sphere. — sphere","text":"Creates position vector spherical object defined radius.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/target_strength.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function to model acoustic target strength — target_strength","title":"Wrapper function to model acoustic target strength — target_strength","text":"Wrapper function model acoustic target strength","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/target_strength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function to model acoustic target strength — target_strength","text":"","code":"target_strength(object, frequency, model, verbose = FALSE, ...)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/target_strength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function to model acoustic target strength — target_strength","text":"object Scatterer-class object. frequency Frequency (Hz). model Model name. verbose Prints current procedural step occurring model initialization calculating TS. Defaults FALSE. ... Additional optional model inputs/parameters.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/transmission_coefficient.html","id":null,"dir":"Reference","previous_headings":"","what":"Transmission coefficient for transmission between two mediums — transmission_coefficient","title":"Transmission coefficient for transmission between two mediums — transmission_coefficient","text":"Transmission coefficient transmission two mediums","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/transmission_coefficient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transmission coefficient for transmission between two mediums — transmission_coefficient","text":"","code":"transmission_coefficient(interface1, interface2)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/transmission_coefficient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transmission coefficient for transmission between two mediums — transmission_coefficient","text":"interface1 Dataframe object containing density (kg/m^3) sound speed (m/s) values boundary/interface (1) interface2 Dataframe object containing density (kg/m^3) sound speed (m/s) values boundary/interface (2)","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/vecnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Euclidean norm across each row of a given matrix. — vecnorm","title":"Calculates the Euclidean norm across each row of a given matrix. — vecnorm","text":"Calculates Euclidean norm across row given matrix.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/vecnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Euclidean norm across each row of a given matrix. — vecnorm","text":"","code":"vecnorm( x )"},{"path":"https://brandynlucca.github.io/acousticTS/reference/vecnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Euclidean norm across each row of a given matrix. — vecnorm","text":"x matrix numeric, real values.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/vecnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Euclidean norm across each row of a given matrix. — vecnorm","text":"Calculates Euclidean norm vector.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/vecnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Euclidean norm across each row of a given matrix. — vecnorm","text":"","code":"values <- matrix( c( 1 , 2 , 3 ) , ncol = 3 ) vecnorm( values ) # should yield 3.741657 #> [1] 3.741657"},{"path":"https://brandynlucca.github.io/acousticTS/reference/yc.html","id":null,"dir":"Reference","previous_headings":"","what":"Cylindrical Bessel (Neumann) function of the second kind and its derivative — yc","title":"Cylindrical Bessel (Neumann) function of the second kind and its derivative — yc","text":"Calculate cylindrical Bessel function first kind (yc) first (ycd) derivatives.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/yc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cylindrical Bessel (Neumann) function of the second kind and its derivative — yc","text":"","code":"yc(l, n)  ycd(l, n)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/yc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cylindrical Bessel (Neumann) function of the second kind and its derivative — yc","text":"l integer fractional order n complex real argument","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/yc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cylindrical Bessel (Neumann) function of the second kind and its derivative — yc","text":"Calculates cylindrical Bessel function first kind (Y_v) respective derivatives.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/yc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cylindrical Bessel (Neumann) function of the second kind and its derivative — yc","text":"Amos D.E., \"AMOS, Portable Package Bessel Functions Complex Argument Nonnegative Order\", http://netlib.org/amos","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/young.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Young's modulus (E). — young","title":"Calculate Young's modulus (E). — young","text":"Calculate Young's modulus (E) two three elastic moduli calculate Lamé's parameter. two values input, function default using bulk (K) shear (G) moduli. assumes input values represent 3D material properties.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/young.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Young's modulus (E). — young","text":"","code":"young(K = NULL, G = NULL, nu = NULL)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/young.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Young's modulus (E). — young","text":"K Bulk modulus (Pa). G Shear modulus (Pa). nu Poisson's ratio (Dimensionless).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/young.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Young's modulus (E). — young","text":"Returns estimate Young's modulus (E).","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ys.html","id":null,"dir":"Reference","previous_headings":"","what":"Spherical Bessel function of the second kind and its respective derivative — ys","title":"Spherical Bessel function of the second kind and its respective derivative — ys","text":"Spherical Bessel function second kind respective derivative","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spherical Bessel function of the second kind and its respective derivative — ys","text":"","code":"ys(l, n)  ysd(l, n)  ysdd(l, n)"},{"path":"https://brandynlucca.github.io/acousticTS/reference/ys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spherical Bessel function of the second kind and its respective derivative — ys","text":"l integer fractional order n complex real argument","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spherical Bessel function of the second kind and its respective derivative — ys","text":"Calculates spherical Bessel function second kind (ys) first (ysd) second (ysdd) derivatives.","code":""},{"path":"https://brandynlucca.github.io/acousticTS/reference/ys.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spherical Bessel function of the second kind and its respective derivative — ys","text":"Amos D.E., \"AMOS, Portable Package Bessel Functions Complex Argument Nonnegative Order\", http://netlib.org/amos","code":""}]
